#! /usr/bin/env sh
#
# 8GB RAM + 2GB SWAP
# 16GB free space
#

#
# staging
#
stage0() {
	DIR="$1"
	SRC="$2"
	DST="$3"

	mkdir "$PWD/cruxmedia"
	mount "$SRC" "$PWD/cruxmedia"
	mkbootstrap "crux_gnulinux" "$DIR/bootstrap" --ports "$PWD/cruxmedia/crux/core"
	mkbootstrap "crux_gnulinux" "$DIR/bootstrap" --ports "$PWD/cruxmedia/crux/opt"
	mkbootstrap "crux_gnulinux" "$DIR/bootstrap" --ports "$PWD/cruxmedia/crux/xorg"
	umount "$PWD/cruxmedia"

	setup_chroot "$DIR/bootstrap"

	cat >> "$DIR/bootstrap/etc/ports/core.rsync" <<"EOF"
host=crux.nu
collection=ports/crux-3.6/core/
destination=/usr/ports/core
EOF

	cat >> "$DIR/bootstrap/etc/pkgmk.conf" <<"EOF"
export JOBS=$(nproc)
export MAKEFLAGS="-j $JOBS"

PKGMK_COMPRESSION_MODE="xz"
EOF

	enter_chroot "$DIR/bootstrap" <<"EOF"
localedef -i "en_US" -f "UTF-8" "en_US.UTF-8"

export LANG="en_US.UTF-8"

echo -e "toor\ntoor" | (passwd root)

ports -u

cd /usr/ports/core
for pkg in *; do
	cd "/usr/ports/core/$pkg" && fakeroot -- pkgmk -do
done
cd

cd /usr/ports/core
for pkg in *; do
	if cd "/usr/ports/core/$pkg"; then
		if test -f "/usr/ports/core/$pkg/pre-install"; then
			chmod +x /usr/ports/core/$pkg/pre-install
			/usr/ports/core/$pkg/pre-install
		fi
		fakeroot -- pkgmk
	fi
done
cd
EOF

	leave_chroot "$DIR/bootstrap"

	mkdir -p "$PWD/cruxmedia/crux/core"
	find "$DIR/bootstrap/usr/ports" -name "*.pkg.tar.xz" -exec mv "{}" "$PWD/cruxmedia/crux/core" \;

	mkbootisofs "$PWD/cruxmedia" --output "$DST"
	rm -r -f "$PWD/cruxmedia"
}

stage1() {
	DIR="$1"
	SRC="$2"
	DST="$3"

	mkdir "$PWD/cruxmedia"
	mount "$SRC" "$PWD/cruxmedia"
	mkbootstrap "crux_gnulinux" "$DIR/bootstrap" --ports "$PWD/cruxmedia/crux/core"
	umount "$PWD/cruxmedia"

	setup_chroot "$DIR/bootstrap"

	cat >> "$DIR/bootstrap/etc/ports/core.rsync" <<"EOF"
host=crux.nu
collection=ports/crux-3.6/core/
destination=/usr/ports/core
EOF

	cat >> "$DIR/bootstrap/etc/ports/opt.rsync" <<"EOF"
host=crux.nu
collection=ports/crux-3.6/opt/
destination=/usr/ports/opt
EOF

	cat >> "$DIR/bootstrap/etc/pkgmk.conf" <<"EOF"
export JOBS=$(nproc)
export MAKEFLAGS="-j $JOBS"

PKGMK_COMPRESSION_MODE="xz"
EOF

	enter_chroot "$DIR/bootstrap" <<"EOF"
localedef -i "en_US" -f "UTF-8" "en_US.UTF-8"

export LANG="en_US.UTF-8"

echo -e "toor\ntoor" | (passwd root)

ports -u

prt-get install fakeroot

cd /usr/ports/core
for pkg in *; do
	cd "/usr/ports/core/$pkg" && fakeroot -- pkgmk -do
done
cd

cd /usr/ports/core
for pkg in *; do
	cd "/usr/ports/core/$pkg" && fakeroot -- pkgmk
done
cd
EOF

	leave_chroot "$DIR/bootstrap"

	mkdir -p "$PWD/cruxmedia/crux/core"
	find "$DIR/bootstrap/usr/ports/core" -name "*.pkg.tar.xz" -exec mv "{}" "$PWD/cruxmedia/crux/core" \;

	mkbootisofs "$PWD/cruxmedia" --output "$DST"
	rm -r -f "$PWD/cruxmedia"
}

stage2() {
	stage1 "$1" "$2" "$3"
}

stage3() {
	DIR="$1"
	SRC="$2"
	DST="$3"

	mkdir "$PWD/cruxmedia"
	mount "$SRC" "$PWD/cruxmedia"
	mkbootstrap "crux_gnulinux" "$DIR/bootstrap" --ports "$PWD/cruxmedia/crux/core"
	umount "$PWD/cruxmedia"

	cp "$(dirname $0)/packages.opt" "$DIR/bootstrap/packages.opt"

	cp "$(dirname $0)/packages.xorg" "$DIR/bootstrap/packages.xorg"

	setup_chroot "$DIR/bootstrap"

	cat >> "$DIR/bootstrap/etc/ports/core.rsync" <<"EOF"
host=crux.nu
collection=ports/crux-3.6/core/
destination=/usr/ports/core
EOF

	cat >> "$DIR/bootstrap/etc/ports/opt.rsync" <<"EOF"
host=crux.nu
collection=ports/crux-3.6/opt/
destination=/usr/ports/opt
EOF

	cat >> "$DIR/bootstrap/etc/ports/xorg.rsync" <<"EOF"
host=crux.nu
collection=ports/crux-3.6/xorg/
destination=/usr/ports/xorg
EOF

	cat >> "$DIR/bootstrap/etc/pkgmk.conf" <<"EOF"
export JOBS=$(nproc)
export MAKEFLAGS="-j $JOBS"

PKGMK_COMPRESSION_MODE="xz"
EOF

	enter_chroot "$DIR/bootstrap" <<"EOF"
localedef -i "en_US" -f "UTF-8" "en_US.UTF-8"

export LANG="en_US.UTF-8"

echo -e "toor\ntoor" | (passwd root)

ports -u

prt-get install fakeroot
EOF

	cat >> "$DIR/bootstrap/etc/prt-get.conf" <<"EOF"
runscripts yes

makecommand      fakeroot -- pkgmk
EOF

	enter_chroot "$DIR/bootstrap" <<"EOF"
cd /usr/ports/core
for pkg in *; do
	cd "/usr/ports/core/$pkg" && fakeroot -- pkgmk -do
done
cd

cd /usr/ports/opt
for pkg in $(cat /packages.opt); do
	cd "/usr/ports/opt/$pkg" && fakeroot -- pkgmk -do
done
cd

cd /usr/ports/xorg
for pkg in $(cat /packages.xorg); do
	cd "/usr/ports/xorg/$pkg" && fakeroot -- pkgmk -do
done
cd

cd /usr/ports/core
for pkg in *; do
	cd "/usr/ports/core/$pkg" && prt-get update --log "$pkg"
done
cd

prt-get depinst --log $(cat /packages.opt) $(cat /packages.xorg)
EOF

	leave_chroot "$DIR/bootstrap"

	mkdir -p "$PWD/cruxmedia/crux/core"
	find "$DIR/bootstrap/usr/ports/core" -name "*.pkg.tar.xz" -exec mv "{}" "$PWD/cruxmedia/crux/core" \;

	mkdir -p "$PWD/cruxmedia/crux/opt"
	find "$DIR/bootstrap/usr/ports/opt" -name "*.pkg.tar.xz" -exec mv "{}" "$PWD/cruxmedia/crux/opt" \;

	mkdir -p "$PWD/cruxmedia/crux/xorg"
	find "$DIR/bootstrap/usr/ports/xorg" -name "*.pkg.tar.xz" -exec mv "{}" "$PWD/cruxmedia/crux/xorg" \;

	cp -a "$DIR/bootstrap/var/log/pkgbuild" "$PWD/cruxmedia/info"
	gzip -9 -r "$PWD/cruxmedia/info"

	mv "$DIR/bootstrap/var/log/pkgbuild" "$PWD"

	mkbootisofs "$PWD/cruxmedia" --output "$DST"
	cd "$PWD/cruxmedia"
	find * > $DST.txt
	cd "$OLDPWD"
	rm -r -f "$PWD/cruxmedia"
}

#
# chroot
#
setup_chroot() {
	ROOT="$1"

	mount -B "/dev" "$ROOT/dev"
	mount -B "/tmp" "$ROOT/tmp"
	mount -B "/run" "$ROOT/run"
	mount -t proc proc "$ROOT/proc"
	mount -t sysfs none "$ROOT/sys"
	mount -t devpts -o noexec,nosuid,gid=tty,mode=0620 devpts "$ROOT/dev/pts"

	if grep -qs "/sys/firmware/efi/efivars" "/proc/mounts"; then
		mount -B "/sys/firmware/efi/efivars" "$ROOT/sys/firmware/efi/efivars"
	fi

	cp "/etc/resolv.conf" "$ROOT/etc/resolv.conf"
}

enter_chroot() {
	ROOT="$1"

	chroot "$ROOT" /usr/bin/env PS1="(chroot) $PS1" /bin/bash
}

leave_chroot() {
	ROOT="$1"

	for mount in $(grep "$ROOT" "/proc/mounts" | awk '{print $2}'); do
		umount -R "$mount" 2>/dev/null
	done
}

#
# main
#
run_stage() {
	STAGE="$1"
	DIR="$(mktemp -d -p $PWD)"

	case "$STAGE" in
		"0") stage0 "$DIR" "$PWD/master.iso" "$PWD/stage0.iso" > $PWD/common.log 2>&1 ;;
		"1") stage1 "$DIR" "$PWD/stage0.iso" "$PWD/stage1.iso" > $PWD/common.log 2>&1 ;;
		"2") stage3 "$DIR" "$PWD/stage1.iso" "$PWD/stage3.iso" > $PWD/common.log 2>&1 ;;
		# "3") stage3 "$DIR" "$PWD/stage2.iso" "$PWD/stage3.iso" > $PWD/error.log 2>&1 ;;
	esac

	grep -qs "$DIR" "/proc/mounts" || rm -r -f "$DIR"

	grep -qs "^=======> ERROR:" "$PWD/common.log" && exit 1
}

main() {
	STAGE="$1"

	test -f "$PWD/master.iso" || wget -q -T 5 -O "$PWD/master.iso" "http://ftp.morpheus.net/pub/linux/crux/crux-3.5/iso/crux-3.5.iso" || return 1

	for STAGE in 0 1 2 3; do
		run_stage "$STAGE"
	done
}

main "$@"
