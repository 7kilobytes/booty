#! /usr/bin/env sh

#
# stage 0: build from untrusted master
#
stage0() {
	DIR="$1"

	mkdir "$PWD/cruxmedia"
	mount "$PWD/crux.iso" "$PWD/cruxmedia"

	mkbootstrap "crux_gnulinux" "$DIR/bootstrap" --ports "$PWD/cruxmedia/crux/core"

	mkbootstrap "crux_gnulinux" "$DIR/bootstrap" --ports "$PWD/cruxmedia/crux/opt" "fakeroot"

	umount "$PWD/cruxmedia"
	rmdir "$PWD/cruxmedia"
	rm "$PWD/crux.iso"

	setup_chroot "$DIR/bootstrap"

	cat >> "$DIR/bootstrap/etc/ports/core.rsync" <<"EOF"
host=crux.nu
collection=ports/crux-3.6/core/
destination=/usr/ports/core
EOF

	cat >> "$DIR/bootstrap/etc/pkgmk.conf" <<"EOF"
export JOBS=$(nproc)
export MAKEFLAGS="-j $JOBS"

PKGMK_COMPRESSION_MODE="xz"
EOF

	cat >> "$DIR/bootstrap/etc/prt-get.conf" <<"EOF"
writelog enabled
logmode  overwrite
rmlog_on_success yes

runscripts yes

makecommand      fakeroot -- pkgmk
EOF

	enter_chroot "$DIR/bootstrap" <<"EOF"
localedef -i "en_US" -f "UTF-8" "en_US.UTF-8"

export LANG="en_US.UTF-8"

sed -i "s/prtdir \/usr\/ports\/opt/#prtdir \/usr\/ports\/opt/g" /etc/prt-get.conf
mv "/etc/ports/opt.rsync" "/etc/ports/opt.rsync.inactive"

sed -i "s/prtdir \/usr\/ports\/xorg/#prtdir \/usr\/ports\/xorg/g" /etc/prt-get.conf
mv "/etc/ports/xorg.rsync" "/etc/ports/xorg.rsync.inactive"

ports -u

for pkg in /usr/ports/core/*; do
	cd "$pkg" && fakeroot -- pkgmk -do
done
cd

for pkg in /usr/ports/core/*; do
	cd "$pkg" && fakeroot -- pkgmk -d
done
cd
EOF

	leave_chroot "$DIR/bootstrap"

	mkdir -p "$PWD/cruxmedia/crux/core"
	find "$DIR/bootstrap/usr/ports" -name "*.pkg.tar.xz" -exec mv "{}" "$PWD/cruxmedia/crux/core" \;

	# we can't trust to these sources
	# tar -c -f "$PWD/crux-sources.tar" -C "$DIR/bootstrap/usr/ports" .

	mkbootisofs "$PWD/cruxmedia" --output "$PWD/crux.iso"
	rm -r -f "$PWD/cruxmedia"
}

#
# stage 1: build untrusted world
#
stage1() {
	DIR="$1"

	mkdir "$PWD/cruxmedia"
	mount "$PWD/crux.iso" "$PWD/cruxmedia"

	mkbootstrap "crux_gnulinux" "$DIR/bootstrap" --ports "$PWD/cruxmedia/crux/core"

	umount "$PWD/cruxmedia"
	rmdir "$PWD/cruxmedia"
	rm "$PWD/crux.iso"

	setup_chroot "$DIR/bootstrap"

	cat >> "$DIR/bootstrap/etc/ports/core.rsync" <<"EOF"
host=crux.nu
collection=ports/crux-3.6/core/
destination=/usr/ports/core
EOF

	cat >> "$DIR/bootstrap/etc/pkgmk.conf" <<"EOF"
export JOBS=$(nproc)
export MAKEFLAGS="-j $JOBS"

PKGMK_COMPRESSION_MODE="xz"
EOF

	enter_chroot "$DIR/bootstrap" <<"EOF"
localedef -i "en_US" -f "UTF-8" "en_US.UTF-8"

export LANG="en_US.UTF-8"

sed -i "s/prtdir \/usr\/ports\/xorg/#prtdir \/usr\/ports\/xorg/g" /etc/prt-get.conf
mv "/etc/ports/xorg.rsync" "/etc/ports/xorg.rsync.inactive"

ports -u

prt-get install fakeroot
EOF

	cat >> "$DIR/bootstrap/etc/prt-get.conf" <<"EOF"
writelog enabled
logmode  overwrite
rmlog_on_success yes

runscripts yes

makecommand      fakeroot -- pkgmk
EOF

	enter_chroot "$DIR/bootstrap" <<"EOF"
for pkg in /usr/ports/core/*; do
	cd "$pkg" && fakeroot -- pkgmk -do
done
cd

for pkg in /usr/ports/core/*; do
	cd "$pkg" && fakeroot -- pkgmk -d
done
cd
EOF

	leave_chroot "$DIR/bootstrap"

	mkdir -p "$PWD/cruxmedia/crux/core"
	find "$DIR/bootstrap/usr/ports/core" -name "*.pkg.tar.xz" -exec mv "{}" "$PWD/cruxmedia/crux/core" \;

	mkdir -p "$PWD/cruxmedia/crux/opt"
	find "$DIR/bootstrap/usr/ports/opt" -name "*.pkg.tar.xz" -exec mv "{}" "$PWD/cruxmedia/crux/opt" \;

	tar -c -f "$PWD/crux-sources.tar" -C "$DIR/bootstrap/usr/ports" .

	mkbootisofs "$PWD/cruxmedia" --output "$PWD/crux.iso"
	rm -r -f "$PWD/cruxmedia"
}

#
# stage 2: build trusted world
#
stage2() {
	DIR="$1"

	mkdir "$PWD/cruxmedia"
	mount "$PWD/crux.iso" "$PWD/cruxmedia"

	mkbootstrap "crux_gnulinux" "$DIR/bootstrap" --ports "$PWD/cruxmedia/crux/core"

	mkbootstrap "crux_gnulinux" "$DIR/bootstrap" --ports "$PWD/cruxmedia/crux/opt" "fakeroot"

	umount "$PWD/cruxmedia"
	rmdir "$PWD/cruxmedia"
	rm "$PWD/crux.iso"

	setup_chroot "$DIR/bootstrap"

	cat >> "$DIR/bootstrap/etc/ports/core.rsync" <<"EOF"
host=crux.nu
collection=ports/crux-3.6/core/
destination=/usr/ports/core
EOF

	cat >> "$DIR/bootstrap/etc/pkgmk.conf" <<"EOF"
export JOBS=$(nproc)
export MAKEFLAGS="-j $JOBS"

PKGMK_COMPRESSION_MODE="xz"
EOF

	cat >> "$DIR/bootstrap/etc/prt-get.conf" <<"EOF"
writelog enabled
logmode  overwrite
rmlog_on_success yes

runscripts yes

makecommand      fakeroot -- pkgmk
EOF

	tar -x -f "$PWD/crux-sources.tar" -C "$DIR/bootstrap/usr/ports"

	enter_chroot "$DIR/bootstrap" <<"EOF"
localedef -i "en_US" -f "UTF-8" "en_US.UTF-8"

export LANG="en_US.UTF-8"

sed -i "s/prtdir \/usr\/ports\/xorg/#prtdir \/usr\/ports\/xorg/g" /etc/prt-get.conf
mv "/etc/ports/xorg.rsync" "/etc/ports/xorg.rsync.inactive"

ports -u

prt-get update fakeroot

for pkg in /usr/ports/core/*; do
	cd "$pkg" && fakeroot -- pkgmk -do
done
cd

for pkg in /usr/ports/core/*; do
	cd "$pkg" && fakeroot -- pkgmk -d
done
cd
EOF

	leave_chroot "$DIR/bootstrap"

	mkdir -p "$PWD/cruxmedia/crux/core"
	find "$DIR/bootstrap/usr/ports/core" -name "*.pkg.tar.xz" -exec mv "{}" "$PWD/cruxmedia/crux/core" \;

	mkdir -p "$PWD/cruxmedia/crux/opt"
	find "$DIR/bootstrap/usr/ports/opt" -name "*.pkg.tar.xz" -exec mv "{}" "$PWD/cruxmedia/crux/opt" \;

	tar -c -f "$PWD/crux-sources.tar" -C "$DIR/bootstrap/usr/ports" .

	mkbootisofs "$PWD/cruxmedia" --output "$PWD/crux.iso"
	rm -r -f "$PWD/cruxmedia"
}

#
# stage 3: finally build
#
stage3() {
	return 0
}

#
# chroot environment
#
setup_chroot() {
	ROOT="$1"

	mount -B "/dev" "$ROOT/dev"
	mount -B "/tmp" "$ROOT/tmp"
	mount -B "/run" "$ROOT/run"
	mount -t proc proc "$ROOT/proc"
	mount -t sysfs none "$ROOT/sys"
	mount -t devpts -o noexec,nosuid,gid=tty,mode=0620 devpts "$ROOT/dev/pts"

	if grep -qs "/sys/firmware/efi/efivars" "/proc/mounts"; then
		mount -B "/sys/firmware/efi/efivars" "$ROOT/sys/firmware/efi/efivars"
	fi

	cp "/etc/resolv.conf" "$ROOT/etc/resolv.conf"
}

enter_chroot() {
	ROOT="$1"

	chroot "$ROOT" /usr/bin/env PS1="(chroot) $PS1" /bin/bash
}

leave_chroot() {
	ROOT="$1"

	for mount in $(grep "$ROOT" "/proc/mounts" | awk '{print $2}'); do
		umount -R "$mount" 2>/dev/null
	done
}

#
# main
#
run_stage() {
	STAGE="$1"
	DIR="$(mktemp -d -p $PWD)"

	if test "$STAGE" = "0"; then
		test -f "crux.iso" || wget -T 5 -O "crux.iso" "http://ftp.morpheus.net/pub/linux/crux/crux-3.5/iso/crux-3.5.iso" || return 1
	fi

	echo "BUILD: stage $STAGE: tail -f $PWD/stage$STAGE.log"

	case "$STAGE" in
		"0") stage0 "$DIR" >$PWD/stage0.log 2>&1 ;;
		"1") stage1 "$DIR" >$PWD/stage1.log 2>&1 ;;
		"2") stage2 "$DIR" >$PWD/stage2.log 2>&1 ;;
		"3") stage3 "$DIR" >$PWD/stage3.log 2>&1 ;;
	esac

	# grep "$DIR" "/proc/mounts" || rm -r -f "$DIR"

	test -f "crux.iso" || echo "FATAL: stage $STAGE failed"
}

main() {
	case "$1" in
		[0-3])
			run_stage "$1"
			return 0
			;;
	esac

	for stage in 0 1 2 3; do
		run_stage "$stage"
	done
}

main "$@"
