#! /usr/bin/env sh
#
# system requirements:
#
# 4GB RAM + 2GB SWAP
# 20GB FREE SPACE
#

#
# staging
#
stage0() {
	DIR="$1"
	ISO="$2"

	mkdir "$PWD/cruxmedia"
	mount "$ISO" "$PWD/cruxmedia"
	mkbootstrap "crux_gnulinux" "$DIR/bootstrap" --ports "$PWD/cruxmedia/crux/core"
	mkbootstrap "crux_gnulinux" "$DIR/bootstrap" --ports "$PWD/cruxmedia/crux/opt" "fakeroot"
	umount "$PWD/cruxmedia"

	setup_chroot "$DIR/bootstrap"

	cat >> "$DIR/bootstrap/etc/ports/core.rsync" <<"EOF"
host=crux.nu
collection=ports/crux-3.6/core/
destination=/usr/ports/core
EOF

	cat >> "$DIR/bootstrap/etc/pkgmk.conf" <<"EOF"
export JOBS=$(nproc)
export MAKEFLAGS="-j $JOBS"

PKGMK_COMPRESSION_MODE="xz"
EOF

	cat >> "$DIR/bootstrap/etc/prt-get.conf" <<"EOF"
writelog enabled
logmode  overwrite
rmlog_on_success yes

runscripts yes

makecommand      fakeroot -- pkgmk
EOF

	enter_chroot "$DIR/bootstrap" <<"EOF"
localedef -i "en_US" -f "UTF-8" "en_US.UTF-8"

export LANG="en_US.UTF-8"

sed -i "s/prtdir \/usr\/ports\/opt/#prtdir \/usr\/ports\/opt/g" /etc/prt-get.conf
mv "/etc/ports/opt.rsync" "/etc/ports/opt.rsync.inactive"

sed -i "s/prtdir \/usr\/ports\/xorg/#prtdir \/usr\/ports\/xorg/g" /etc/prt-get.conf
mv "/etc/ports/xorg.rsync" "/etc/ports/xorg.rsync.inactive"

ports -u

cd /usr/ports/core
for pkg in *; do
	cd "$pkg" && fakeroot -- pkgmk -do
done
cd

cd /usr/ports/core
for pkg in *; do
	cd "$pkg" && fakeroot -- pkgmk
done
cd
EOF

	leave_chroot "$DIR/bootstrap"

	mkdir -p "$PWD/cruxmedia/crux/core"
	find "$DIR/bootstrap/usr/ports" -name "*.pkg.tar.xz" -exec cp "{}" "$PWD/cruxmedia/crux/core" \;

	mkbootisofs "$PWD/cruxmedia" --output "$PWD/stage0.iso"
	rm -r -f "$PWD/cruxmedia"
}

stage1() {
	DIR="$1"
	ISO="$2"

	mkdir "$PWD/cruxmedia"
	mount "$ISO" "$PWD/cruxmedia"
	mkbootstrap "crux_gnulinux" "$DIR/bootstrap" --ports "$PWD/cruxmedia/crux/core"
	umount "$PWD/cruxmedia"

	setup_chroot "$DIR/bootstrap"

	cat >> "$DIR/bootstrap/etc/ports/core.rsync" <<"EOF"
host=crux.nu
collection=ports/crux-3.6/core/
destination=/usr/ports/core
EOF

	cat >> "$DIR/bootstrap/etc/ports/opt.rsync" <<"EOF"
host=crux.nu
collection=ports/crux-3.6/opt/
destination=/usr/ports/opt
EOF

	cat >> "$DIR/bootstrap/etc/pkgmk.conf" <<"EOF"
export JOBS=$(nproc)
export MAKEFLAGS="-j $JOBS"

PKGMK_COMPRESSION_MODE="xz"
EOF

	enter_chroot "$DIR/bootstrap" <<"EOF"
localedef -i "en_US" -f "UTF-8" "en_US.UTF-8"

export LANG="en_US.UTF-8"

sed -i "s/prtdir \/usr\/ports\/xorg/#prtdir \/usr\/ports\/xorg/g" /etc/prt-get.conf
mv "/etc/ports/xorg.rsync" "/etc/ports/xorg.rsync.inactive"

ports -u

prt-get install fakeroot
EOF

	cat >> "$DIR/bootstrap/etc/prt-get.conf" <<"EOF"
writelog enabled
logmode  overwrite
rmlog_on_success yes

runscripts yes

makecommand      fakeroot -- pkgmk
EOF

	enter_chroot "$DIR/bootstrap" <<"EOF"
cd /usr/ports/core
for pkg in *; do
	cd "$pkg" && fakeroot -- pkgmk -do
done
cd

cd /usr/ports/core
for pkg in *; do
	cd "$pkg" && fakeroot -- pkgmk
done
cd
EOF

	leave_chroot "$DIR/bootstrap"

	mkdir -p "$PWD/cruxmedia/crux/core"
	find "$DIR/bootstrap/usr/ports/core" -name "*.pkg.tar.xz" -exec cp "{}" "$PWD/cruxmedia/crux/core" \;

	mkbootisofs "$PWD/cruxmedia" --output "$PWD/stage1.iso"
	rm -r -f "$PWD/cruxmedia"
}

stage2() {
	DIR="$1"
	ISO="$2"

	mkdir "$PWD/cruxmedia"
	mount "$ISO" "$PWD/cruxmedia"
	mkbootstrap "crux_gnulinux" "$DIR/bootstrap" --ports "$PWD/cruxmedia/crux/core"
	umount "$PWD/cruxmedia"

	setup_chroot "$DIR/bootstrap"

	cat >> "$DIR/bootstrap/etc/ports/core.rsync" <<"EOF"
host=crux.nu
collection=ports/crux-3.6/core/
destination=/usr/ports/core
EOF

	cat >> "$DIR/bootstrap/etc/ports/opt.rsync" <<"EOF"
host=crux.nu
collection=ports/crux-3.6/opt/
destination=/usr/ports/opt
EOF

	cat >> "$DIR/bootstrap/etc/pkgmk.conf" <<"EOF"
export JOBS=$(nproc)
export MAKEFLAGS="-j $JOBS"

PKGMK_COMPRESSION_MODE="xz"
EOF

	enter_chroot "$DIR/bootstrap" <<"EOF"
localedef -i "en_US" -f "UTF-8" "en_US.UTF-8"

export LANG="en_US.UTF-8"

sed -i "s/prtdir \/usr\/ports\/xorg/#prtdir \/usr\/ports\/xorg/g" /etc/prt-get.conf
mv "/etc/ports/xorg.rsync" "/etc/ports/xorg.rsync.inactive"

ports -u

prt-get install fakeroot
EOF

	cat >> "$DIR/bootstrap/etc/prt-get.conf" <<"EOF"
writelog enabled
logmode  overwrite
rmlog_on_success yes

runscripts yes

makecommand      fakeroot -- pkgmk
EOF

	enter_chroot "$DIR/bootstrap" <<"EOF"
cd /usr/ports/core
for pkg in *; do
	cd "$pkg" && fakeroot -- pkgmk -do
done
cd

cd /usr/ports/core
for pkg in *; do
	cd "$pkg" && fakeroot -- pkgmk
done
cd
EOF

	leave_chroot "$DIR/bootstrap"

	mkdir -p "$PWD/cruxmedia/crux/core"
	find "$DIR/bootstrap/usr/ports/core" -name "*.pkg.tar.xz" -exec cp "{}" "$PWD/cruxmedia/crux/core" \;

	mkbootisofs "$PWD/cruxmedia" --output "$PWD/stage2.iso"
	rm -r -f "$PWD/cruxmedia"
}

stage3() {
	DIR="$1"
	ISO="$2"

	mkdir "$PWD/cruxmedia"
	mount "$ISO" "$PWD/cruxmedia"
	mkbootstrap "crux_gnulinux" "$DIR/bootstrap" --ports "$PWD/cruxmedia/crux/core"
	umount "$PWD/cruxmedia"

	setup_chroot "$DIR/bootstrap"

	cat >> "$DIR/bootstrap/etc/ports/core.rsync" <<"EOF"
host=crux.nu
collection=ports/crux-3.6/core/
destination=/usr/ports/core
EOF

	cat >> "$DIR/bootstrap/etc/ports/opt.rsync" <<"EOF"
host=crux.nu
collection=ports/crux-3.6/opt/
destination=/usr/ports/opt
EOF

	cat >> "$DIR/bootstrap/etc/ports/xorg.rsync" <<"EOF"
host=crux.nu
collection=ports/crux-3.6/xorg/
destination=/usr/ports/xorg
EOF

	cat >> "$DIR/bootstrap/etc/pkgmk.conf" <<"EOF"
export JOBS=$(nproc)
export MAKEFLAGS="-j $JOBS"

PKGMK_COMPRESSION_MODE="xz"
EOF

	enter_chroot "$DIR/bootstrap" <<"EOF"
localedef -i "en_US" -f "UTF-8" "en_US.UTF-8"

export LANG="en_US.UTF-8"

ports -u

prt-get install fakeroot
EOF

	cat >> "$DIR/bootstrap/etc/prt-get.conf" <<"EOF"
writelog enabled
logmode  overwrite
rmlog_on_success yes

runscripts yes

makecommand      fakeroot -- pkgmk
EOF

	cat >> "$DIR/bootstrap/packages.opt" <<"EOF"
alsa-lib
at-spi2-atk
at-spi2-core
atk
bin86
btrfs-progs
cairo
cdrkit
cmake
cryptsetup
dbus
dbus-glib
dialog
dosfstools
efibootmgr
efivar
fakeroot
fetchmail
firefox-bin
fontconfig
freetype
fribidi
gdk-pixbuf
glib
gnu-efi
gobject-introspection
grub2
grub2-efi
gtk
gtk3
harfbuzz
hicolor-icon-theme
intltool
iputils
jfsutils
json-c
keyutils
libaio
libevent
libgcrypt
libgpg-error
libidl
libjpeg-turbo
libnl
libpng
libtiff
libxml2
libxslt
lilo
linux-firmware
llvm
lvm2
mdadm
meson
mtools
mutt
nano
nfs-utils
ninja
openbox
p5-xml-parser
pango
parted
popt
ppp
prt-utils
python
python3-setuptools
python3-mako
python3-markupsafe
reiserfsprogs
rpcbind
shared-mime-info
syslinux
talloc
unzip
wireless-tools
wpa_supplicant
xfsprogs
xterm
yasm
zip
EOF

	cat >> "$DIR/bootstrap/packages.xorg" <<"EOF"
glu
libdrm
libepoxy
libglvnd
libinput
libpthread-stubs
libvdpau
mesa3d
mtdev
xkeyboard-config
xorg
xorg-bdftopcf
xorg-font-alias
xorg-font-bitstream-vera
xorg-font-misc-misc
xorg-font-util
xorg-iceauth
xorg-libdmx
xorg-libevdev
xorg-libfontenc
xorg-libice
xorg-libpciaccess
xorg-libpixman
xorg-libsm
xorg-libx11
xorg-libxau
xorg-libxaw
xorg-libxcb
xorg-libxcomposite
xorg-libxcursor
xorg-libxdamage
xorg-libxdmcp
xorg-libxext
xorg-libxfixes
xorg-libxfont
xorg-libxfont2
xorg-libxft
xorg-libxi
xorg-libxinerama
xorg-libxkbfile
xorg-libxkbui
xorg-libxmu
xorg-libxpm
xorg-libxrandr
xorg-libxrender
xorg-libxres
xorg-libxscrnsaver
xorg-libxshmfence
xorg-libxt
xorg-libxtst
xorg-libxv
xorg-libxvmc
xorg-libxxf86dga
xorg-libxxf86misc
xorg-libxxf86vm
xorg-makedepend
xorg-mkfontscale
xorg-rendercheck
xorg-rgb
xorg-server
xorg-sessreg
xorg-setxkbmap
xorg-util-macros
xorg-x11perf
xorg-xauth
xorg-xbacklight
xorg-xbitmaps
xorg-xcb-proto
xorg-xcb-util
xorg-xcb-util-wm
xorg-xcb-util-renderutil
xorg-xcb-util-keysyms
xorg-xcb-util-image
xorg-xcompmgr
xorg-xdpyinfo
xorg-xdriinfo
xorg-xev
xorg-xf86-input-evdev
xorg-xf86-input-keyboard
xorg-xf86-input-libinput
xorg-xf86-input-mouse
xorg-xf86-input-synaptics
xorg-xf86-video-ati
xorg-xf86-video-dummy
xorg-xf86-video-intel
xorg-xf86-video-neomagic
xorg-xf86-video-nouveau
xorg-xf86-video-tga
xorg-xf86-video-vesa
xorg-xfontsel
xorg-xgamma
xorg-xhost
xorg-xinit
xorg-xkbcomp
xorg-xkill
xorg-xlsfonts
xorg-xmodmap
xorg-xorgproto
xorg-xprop
xorg-xrandr
xorg-xrdb
xorg-xset
xorg-xsetroot
xorg-xtrans
xorg-xvinfo
xorg-xwininfo
EOF

	enter_chroot "$DIR/bootstrap" <<"EOF"
cd /usr/ports/core
for pkg in *; do
	cd "$pkg" && fakeroot -- pkgmk -do
done
cd

cd /usr/ports/opt
for pkg in $(cat /packages.opt); do
	cd "$pkg" && fakeroot -- pkgmk -do
done
cd

cd /usr/ports/xorg
for pkg in $(cat /packages.xorg); do
	cd "$pkg" && fakeroot -- pkgmk -do
done
cd

cd /usr/ports/core
for pkg in *; do
	cd "$pkg" && prt-get update "$pkg"
done
cd

prt-get depinst $(cat /packages.opt) $(cat /packages.xorg)
EOF

	leave_chroot "$DIR/bootstrap"

	mkdir -p "$PWD/cruxmedia/crux/core"
	find "$DIR/bootstrap/usr/ports/core" -name "*.pkg.tar.xz" -exec cp "{}" "$PWD/cruxmedia/crux/core" \;

	mkdir -p "$PWD/cruxmedia/crux/opt"
	find "$DIR/bootstrap/usr/ports/opt" -name "*.pkg.tar.xz" -exec cp "{}" "$PWD/cruxmedia/crux/opt" \;

	mkdir -p "$PWD/cruxmedia/crux/xorg"
	find "$DIR/bootstrap/usr/ports/xorg" -name "*.pkg.tar.xz" -exec cp "{}" "$PWD/cruxmedia/crux/xorg" \;

	mkbootisofs "$PWD/cruxmedia" --output "$PWD/stage3.iso"

	rm "$PWD/staging.iso"

	rm -r -f "$PWD/cruxmedia"
}

#
# chroot
#
setup_chroot() {
	ROOT="$1"

	mount -B "/dev" "$ROOT/dev"
	mount -B "/tmp" "$ROOT/tmp"
	mount -B "/run" "$ROOT/run"
	mount -t proc proc "$ROOT/proc"
	mount -t sysfs none "$ROOT/sys"
	mount -t devpts -o noexec,nosuid,gid=tty,mode=0620 devpts "$ROOT/dev/pts"

	if grep -qs "/sys/firmware/efi/efivars" "/proc/mounts"; then
		mount -B "/sys/firmware/efi/efivars" "$ROOT/sys/firmware/efi/efivars"
	fi

	cp "/etc/resolv.conf" "$ROOT/etc/resolv.conf"
}

enter_chroot() {
	ROOT="$1"

	chroot "$ROOT" /usr/bin/env PS1="(chroot) $PS1" /bin/bash
}

leave_chroot() {
	ROOT="$1"

	for mount in $(grep "$ROOT" "/proc/mounts" | awk '{print $2}'); do
		umount -R "$mount" 2>/dev/null
	done
}

#
# main
#
run_stage() {
	STAGE="$1"
	DIR="$(mktemp -d -p $PWD)"

	case "$STAGE" in
		"0") stage0 "$DIR" "$PWD/crux.iso" >$PWD/stage0.log 2>&1 ;;
		"1") stage1 "$DIR" "$PWD/stage0.iso" >$PWD/stage1.log 2>&1 ;;
		"2") stage2 "$DIR" "$PWD/stage1.iso" >$PWD/stage2.log 2>&1 ;;
		"3") stage3 "$DIR" "$PWD/stage2.iso" >$PWD/stage3.log 2>&1 ;;
	esac

	grep -qs "$DIR" "/proc/mounts" || echo rm -r -f "$DIR"
}

main() {
	test -f "$PWD/crux.iso" || wget -T 5 -O "$PWD/crux.iso" "http://ftp.morpheus.net/pub/linux/crux/crux-3.5/iso/crux-3.5.iso" || return 1

	for stage in 0 1 2 3; do
		run_stage "$stage"
	done
}

main "$@"
