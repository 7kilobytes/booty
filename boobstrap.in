#! /usr/bin/env sh

mkbootstrap() {
	DO="$1"

	case "$2" in
		"") ;;
		*) shift ;;
	esac

	case "$DO" in
		"crux_gnulinux") cruxstrap "$@" ;;
		"archlinux_gnulinux"|"arch_gnulinux") pacstrap "$@" ;;
		"manjaro_gnulinux") basestrap "$@" ;;
		"debian_gnulinux") debootstrap "$@" ;;
		"fedora_gnulinux"|"redhat_gnulinux"|"centos_gnulinux") dnf "$@" ;;
		"--help"|"-h"|"-?")
			cat <<EOF
$BOOBSTRAP_NAME $BOOBSTRAP_VERSION
Usage: mkbootstrap <system> <directory> [options]... [packages]...
Installs selected system into the directory.

  <system>                   native supported OS:
                               crux_gnulinux

                             other supported OS:
                               fedora_gnulinux *
                               redhat_gnulinux *
                               centos_gnulinux *
                               debian_gnulinux *
                               archlinux_gnulinux *
                               manjaro_gnulinux *

                             * requires external wrappers i.e.:
                               pacstrap, debootstrap and so on

  crux_gnulinux options:

  --ports-dir <directory>    directory with packages for CRUX

  [packages]                 packages to install.
                               can be package name or filename
                               if empty then selected
                               --ports-dir will be installed
EOF
exit 0
;;
	esac
}

mkoverlayfs() {
	OVERLAY=""
	IMAGE=""
	FORMAT=""

	while test "$1"; do
		case "$1" in
			"--output") IMAGE="$(realpath $2)" ; shift ;;
			"--format") FORMAT="$2" ; shift ;;
			"--cpio") FORMAT="cpio" ;;
			"--squashfs") FORMAT="squashfs" ;;
			"--squashfs-xz") FORMAT="squashfs-xz" ;;
			"--help"|"-h")
				cat <<EOF
$BOOBSTRAP_NAME $BOOBSTRAP_VERSION
Usage: mkoverlayfs <directory> [options]...
Creates filesystem from the directory by using selected format.

  --output <file>            specify output file

  --format                   select filesystem format, can be one of:
                               cpio
                               squashfs
                               squashfs-xz

  --cpio,                    aliases for the --format
  --squashfs,
  --squashfs-xz
EOF
exit 0
				;;
			*)
				if test "$OVERLAY" = ""; then
					OVERLAY="$1"
				fi
				;;
		esac
		shift
	done

	if test "$IMAGE" = ""; then
		echo "No image output specified" | msg -2 --foreground "Brown"
		return 1
	fi

	if test "$FORMAT" = ""; then
		echo "No format output specified, fallback to using directory" | msg -2 --foreground "Brown"
	fi

	case "$FORMAT" in
		"cpio")
			ofs_mk_cpio "$OVERLAY" "$IMAGE.cpio"
			CODE="$?"
			;;
		"squashfs")
			ofs_mk_squashfs "$OVERLAY" "$IMAGE.squashfs"
			CODE="$?"
			;;
		"squashfs-xz")
			ofs_mk_squashfs_xz "$OVERLAY" "$IMAGE.squashfs"
			CODE="$?"
			;;
		*)
			CODE="1"
			echo "Unknown filesystem format" | msg -2 --foreground "Brown"
			;;
	esac

	return "$CODE"
}

mkinitramfs() {
	DIR=""
	OUTPUT=""
	IS_STANDALONE=""
	IS_OVERLAY=""
	OVERLAYS=""
	FORMAT=""

	while test "$1"; do
		case "$1" in
			"--output") OUTPUT="$(realpath $2)" ; shift ;;
			"--standalone") IS_STANDALONE="yes" ;;
			"--overlay") IS_OVERLAY="yes" ; OVERLAYS="$OVERLAYS $2" ; shift ;;
			"--format") FORMAT="$2" ; shift ;;
			"--cpio") FORMAT="cpio" ;;
			"--squashfs") FORMAT="squashfs" ;;
			"--squashfs-xz") FORMAT="squashfs-xz" ;;
			"--help"|"-h")
				cat <<EOF
$BOOBSTRAP_NAME $BOOBSTRAP_VERSION
Usage: mkinitramfs <directory> [options]...
Creates bootable ram disk image from the directory.

  --output <file>            specify output file,
                               by default outputs to STDOUT

  --standalone               uses directory "as is"

  --overlay                  add overlay

  --squashfs,                pre-defined command mksquashfs
  --squashfs-xz              pre-defined command mksquashfs
EOF
exit 0
				;;
			*)
				if test "$DIR" = ""; then
					DIR="$1"
				fi
				;;
		esac
		shift
	done
	if test "$OUTPUT" = ""; then
		OUTPUT="-"
	fi
	if test "$DIR" = ""; then
		echo "Directory not selected" | msg -2 --foreground "Brown"
		return 1
	fi
	if test "$FORMAT" = ""; then
		FORMAT="directory"
	fi
	echo "Generating initramfs [$DIR]" | msg -2
	hi
	if test "$IS_STANDALONE" = ""; then
		rd_make_dir "$DIR"
		rd_copy_dev "$DIR"
		rd_copy_bin "$DIR"
		rd_gen_init "$DIR"
	fi
	if test "$IS_STANDALONE" = "yes"; then
		if test -a "$DIR/init"; then
			echo "Found /init" | msg -2
		else
			echo "Empty /init is now wrapper for /sbin/init" | msg -2
			echo "#! /sbin/init" > "$DIR/init"
			chmod +x "$DIR/init"
		fi
	fi
	if test "$IS_OVERLAY" = "yes"; then
		NUM=0
		echo "Prepare overlays" | msg -2
		mkdir -p "$DIR/media/system" 2>/dev/null
		hi
		for overlay in $OVERLAYS; do
			NUM="$(($NUM + 10))"
			SOURCE="$overlay"
			TARGET="$DIR/media/system/$NUM-$(basename $overlay)"
			mkoverlayfs "$SOURCE" \
				--output "$TARGET" \
				--format "$FORMAT"
			CODE="$?"
			hi
			case "$CODE" in
				"0") echo "Success" | msg -2 --foreground "Light Green" ;;
				*) echo "Failure [$CODE]" | msg -2 --foreground "Brown" ;;
			esac
			lo
		done
		lo
		echo "Overlays done" | msg -2
	fi
	echo "Creating initramfs [$OUTPUT]" | msg -2
	cd "$DIR" 2>/dev/null
	case "$OUTPUT" in
		""|"-")
			find . -print0 | cpio --create --format "newc" --null --quiet 2>/dev/null
			CODE="$?"
			;;
		*)
			find . -print0 | cpio --create --format "newc" --null --quiet > "$OUTPUT" 2>/dev/null
			CODE="$?"
			;;
	esac
	hi
	case "$CODE" in
		"0") echo "Success" | msg -2 --foreground "Light Green" ;;
		*) echo "Error while generating initramfs" | msg -2 --foreground "Brown" --highlight ;;
	esac
	lo
	cd "$OLDPWD" 2>/dev/null
	echo "Done [$OUTPUT]" | msg -2
	lo
	echo "Done [$DIR]" | msg -2
}

mkbootisofs() {
	DIR=""
	OUTPUT=""
	IS_OVERLAY=""
	OVERLAYS=""
	FORMAT=""
	PORTABLE=""
	BOOTABLE=""
	ISO_9660=""

	while test "$1"; do
		case "$1" in
			"--output") ISO_9660="yes" ; OUTPUT="$(realpath $2)" ; shift ;;
			"--portable") PORTABLE="yes" ;;
			"--bootable") BOOTABLE="yes" ;;
			"--iso-9660") ISO_9660="yes" ;;
			"--overlay") IS_OVERLAY="yes" ; OVERLAYS="$OVERLAYS $2" ; shift ;;
			"--cpio") FORMAT="cpio" ;;
			"--squashfs") FORMAT="squashfs" ;;
			"--squashfs-xz") FORMAT="squashfs-xz" ;;
			"--help")
				cat <<EOF
$BOOBSTRAP_NAME $BOOBSTRAP_VERSION
Usage: mkbootisofs <directory> [options]...
Creates BIOS and/or UEFI compatible bootable images.

  --output < file | device | - >

  --portable,                creates structure of the disk (default)
  --bootable,                makes bootable device where directory created
  --iso-9660                 additional outputs ISO

  --overlay < directory >

  --cpio,
  --squashfs

  --help
EOF
exit 0
				;;
			*)
				if test "$DIR" = ""; then
					DIR="$1"
				fi
				;;
		esac
		shift
	done
	for dir in "/usr/lib/grub/i386-pc" "/lib/grub/i386-pc"; do
		if test -f "$dir/cdboot.img"; then
			GRUB_i386_CDBOOT="$dir/cdboot.img"
		fi
		if test -f "$dir/boot_hybrid.img"; then
			GRUB_i386_HYBRID="$dir/boot_hybrid.img"
		fi
	done
	if test "$GRUB_i386_CDBOOT" = ""; then
		echo "cdboot.img none found. install grub-pc-bin or something." | msg -2
		echo "or specify file: export GRUB_i386_CDBOOT=./cdboot.img" | msg -2
		return 1
	fi

	if test "$GRUB_i386_HYBRID" = ""; then
		echo "boot_hybrid.img none found. install grub-pc-bin or something." | msg -2
		echo "or specify file: export GRUB_i386_HYBRID=./boot_hybrid.img" | msg -2
		return 1
	fi
	if test "$FORMAT" = ""; then
		FORMAT="cpio"
	fi
	echo "Creating bootable filesystem [$DIR]" | msg -2
	hi

		if test "$IS_OVERLAY" = "yes"; then
			NUM=0
			echo "Prepare overlays" | msg -2
			mkdir -p "$DIR/system"
			hi
			for overlay in $OVERLAYS; do
				NUM="$(($NUM + 10))"
				SOURCE="$overlay"
				TARGET="$DIR/system/$NUM-$(basename $overlay)"
				mkoverlayfs "$SOURCE" \
					--output "$TARGET" \
					--format "$FORMAT"
				CODE="$?"
				hi
				case "$CODE" in
					"0") echo "Success" | msg -2 --foreground "Light Green" ;;
					*) echo "Failure [$CODE]" | msg -2 --foreground "Brown" ;;
				esac
				lo
			done
			lo
			echo "Overlays done" | msg -2
		fi

	if test -f "$DIR/boot/grub.cfg"; then
		echo "Keep pre-installed configuration" | msg -2 --foreground "Purple"
	elif bootloader_conf >/dev/null 2>&1; then
		echo "Writing grub configuration" | msg -2 --foreground "Purple"
		mkdir -p "$DIR/boot/grub" 2>/dev/null
		bootloader_conf 2>/dev/null >> "$DIR/boot/grub/grub.cfg"
		bootloader_menu 2>/dev/null >> "$DIR/boot/grub/grub.cfg"
	else
		echo "Bootloader configuration failed to install" | msg -2 --foreground "Brown"
	fi

		echo "Generate BIOS bootloader" | msg -2 --foreground "Purple"
		hi

		grub-mkstandalone \
			--format="i386-pc" \
			--output="$DIR/boot/grub/grub.raw" \
			--install-modules="linux16 linux normal iso9660 biosdisk memdisk test search" \
			--modules="linux16 linux normal iso9660 biosdisk memdisk test search" \
			--locales="" \
			--fonts="" \
			--themes="" \
			"/boot/grub/grub.cfg=$DIR/boot/grub/grub.cfg" \
			>/dev/null 2>&1

		case "$?" in
			"0") ;;
			*) echo "Failure [$?]" | msg -2 --foreground "Brown" ;;
		esac
		lo

		echo "Copying BIOS bootloader" | msg -2 --foreground "Purple"
		hi

		cat "$GRUB_i386_CDBOOT" "$DIR/boot/grub/grub.raw" > "$DIR/boot/grub/bios.img" 2>/dev/null

		case "$?" in
			"0") ;;
			*) echo "Failure [$?]" | msg -2 --foreground "Brown" ;;
		esac
		lo

		echo "Generate UEFI bootloader" | msg -2 --foreground "Purple"
		hi

		grub-mkstandalone \
			--format="x86_64-efi" \
			--output="$DIR/boot/grub/grub.efi" \
			--modules="" \
			--locales="" \
			--fonts="" \
			--themes="" \
			"/boot/grub/grub.cfg=$DIR/boot/grub/grub.cfg" \
			>/dev/null 2>&1

		case "$?" in
			"0") ;;
			*) echo "Failure [$?]" | msg -2 --foreground "Brown" ;;
		esac

		echo "Creating UEFI (FAT32) partition" | msg -2 --foreground "Purple"
		hi

		echo "Writing empty partition" | msg -2 --foreground "Purple"
		hi
		truncate -s "10MB" "$DIR/boot/grub/uefi.img" 2>/dev/null
		case "$?" in
			"0") ;;
			*) echo "Failure [$?]" | msg -2 --foreground "Brown" ;;
		esac
		lo

		echo "Formatting empty partition to FAT32" | msg -2 --foreground "Purple"
		hi
		mkdosfs "$DIR/boot/grub/uefi.img" 1>/dev/null 2>/dev/null
		case "$?" in
			"0") ;;
			*) echo "Failure [$?]" | msg -2 --foreground "Brown" ;;
		esac
		lo

		echo "Mounting UEFI (FAT32) partition" | msg -2 --foreground "Purple"
		hi
		mkdir "$DIR/uefi" 2>/dev/null
		mount "$DIR/boot/grub/uefi.img" "$DIR/uefi" 2>/dev/null
		case "$?" in
			"0") ;;
			"32") echo "root priveleges required for mount" | msg -2 --foreground "Light Red" --highlight ;;
			*) echo "Failure [$?]" | msg -2 --foreground "Brown" ;;
		esac
		lo

		echo "Copying UEFI bootloader to UEFI (FAT32) partition" | msg -2 --foreground "Purple"
		hi
		mkdir "$DIR/uefi/EFI" 2>/dev/null
		mkdir "$DIR/uefi/EFI/BOOT" 2>/dev/null
		cp "$DIR/boot/grub/grub.efi" "$DIR/uefi/EFI/BOOT/BOOTX64.EFI" 2>/dev/null
		case "$?" in
			"0") ;;
			*) echo "Failure [$?]" | msg -2 --foreground "Brown" ;;
		esac
		lo

		echo "Unmounting UEFI (FAT32) partition" | msg -2 --foreground "Purple"
		hi
		umount "$DIR/uefi" 2>/dev/null
		case "$?" in
			"0") ;;
			"32") echo "root priveleges required for umount" | msg -2 --foreground "Light Red" --highlight ;;
			*) echo "Failure [$?]" | msg -2 --foreground "Brown" ;;
		esac
		lo

		rmdir "$DIR/uefi" 2>/dev/null

		lo
		lo

	if test "$BOOTABLE" = "yes"; then
		DEV="$(df $DIR | tail -n 1 | tr -s " " | cut -d " " -f 1 | sed -r "s:[0-9]+\$::" | sed -r "s:([0-9])[a-z]+\$:\\1:i")"
		echo "Creating bootable device [$DEV]" | msg -2 --foreground "Light Blue"
		hi
		echo "Installing UEFI bootloader" | msg -2 --foreground "Blue"
		hi
		mkdir "$DIR/EFI" 2>/dev/null
		mkdir "$DIR/EFI/BOOT" 2>/dev/null
		cp "$DIR/boot/grub/grub.efi" "$DIR/EFI/BOOT/BOOTX64.EFI" 2>/dev/null
		case "$?" in
			"0") ;;
			*) echo "Failure [$?]" | msg -2 --foreground "Brown" ;;
		esac
		lo
		lo
	fi

	if test "$ISO_9660" = "yes"; then
		if test "$OUTPUT" = ""; then
			OUTPUT="-"
		fi

		echo "Writing BIOS/UEFI bootable ISO image [$OUTPUT]" | msg -2 --foreground "Purple"
		hi

		xorriso -as "mkisofs" \
			-iso-level 3 \
			-full-iso9660-filenames \
			--grub2-boot-info \
			--grub2-mbr "$GRUB_i386_HYBRID" \
			--boot-catalog-hide \
			-eltorito-boot "boot/grub/bios.img" \
			-no-emul-boot \
			-boot-load-size 4 \
			-boot-info-table \
			-eltorito-alt-boot \
			-e "boot/grub/uefi.img" \
			-no-emul-boot \
			-append_partition 2 "0xEF" "$DIR/boot/grub/uefi.img" \
			-graft-points \
			-quiet \
			-output "$OUTPUT" \
			"$DIR" 2>/dev/null

		case "$?" in
			"0") ;;
			*) echo "Failure [$?]" | msg -2 --foreground "Brown" ;;
		esac
		lo
	fi

	lo
	echo "Done [$DIR]" | msg -2
}

exportroot() {
	CODE=""
	DIR=""
	while test "$1"; do
		case "$1" in
			*)
				if test "$DIR" = ""; then
					DIR="$1"
				fi
				;;
		esac
		shift
	done
	if test -d "$DIR"; then
		echo "Export chroot [$DIR]" | msg -2
		hi
		cd "$DIR"
		find . -print0 | cpio --create --format "newc" --null --quiet 2>/dev/null
		CODE="$?"
		case "$CODE" in
			"0")
				echo "Export success" | msg -2 --foreground "Light Green"
				;;
			*)
				echo "Export failed" | msg -2 msg -2 --foreground "Brown"
				;;
		esac
		cd "$OLDPWD"
		lo
		echo "Done [$DIR]" | msg -2
	else
		echo "No such directory [$DIR] for export" | msg -2 --foreground "Brown"
	fi
	return "$CODE"
}

importroot() {
	CODE=""
	DIR=""
	while test "$1"; do
		case "$1" in
			*)
				if test "$DIR" = ""; then
					DIR="$1"
				fi
				;;
		esac
		shift
	done
	if test -d "$DIR"; then
		echo "Import chroot [$DIR]" | msg -2
		hi
		cd "$DIR"
		cpio --extract --make-directories --format "newc" --quiet 1>/dev/null 2>/dev/null
		CODE="$?"
		case "$CODE" in
			"0")
				echo "Import success" | msg -2 --foreground "Light Green"
				;;
			*)
				echo "Import failed [$CODE]" | msg -2 --foreground "Brown"
				;;
		esac
		cd "$OLDPWD"
		lo
		echo "Done [$DIR]" | msg -2
	else
		echo "No such directory [$DIR] for import" | msg -2 --foreground "Brown"
	fi
	return "$CODE"
}

lddtree() {
	if test "$1" = ""; then
		return 0
	fi

	echo "$1"

	for dep in $(ldd "$1" | awk 'BEGIN{ORS="\n"}$1~/^\//{print $1}$3~/^\//{print $3}'); do
		lddtree "$dep"
	done
}

pkgadd() {
	CHROOT="/"

	# NOTABUG
	# behavior like original pkgadd
	while test "$2"; do
		case "$1" in
			"--root"|"-r") CHROOT="$2" ; shift ;;
			*) echo "invalid option $1" 1>&2 ; return 1 ;;
		esac
		shift
	done

	name="${1}"
	name="${name##*/}"
	name="${name%%.pkg*}"
	name="${name%%\#*}"

	version="${1}"
	version="${version##*/}"
	version="${version%%.pkg*}"
	version="${version##*\#}"

	echo "$name" >> "$CHROOT/var/lib/pkg/db" 2>/dev/null		|| return 1
	echo "$version" >> "$CHROOT/var/lib/pkg/db" 2>/dev/null		|| return 1
	tar -xpvf "$1" \
		--xattrs-include="*.*" \
		--numeric-owner \
		--directory "$CHROOT" >> "$CHROOT/var/lib/pkg/db" \
		2>/dev/null						|| return 1
	echo "" >> "$CHROOT/var/lib/pkg/db" 2>/dev/null			|| return 1
}

rd_copy_dev() {
	echo "Copying devices" | msg -2
	hi
	for dev in "console" "tty" "tty1" "null"; do
		cp -a "/dev/$dev" "$1/dev/$dev" 2>/dev/null
		CODE="$?"
		case "$CODE" in
			"0")
				echo "/dev/$dev" | msg -2 --foreground "Light Blue"
				;;
			*)
				echo "/dev/$dev" | msg -2 --foreground "Light Red" --highlight
				hi
				echo "Failure [$CODE]" | msg -2 --foreground "Brown"
				lo
				;;
		esac
	done
	lo
}

rd_copy_bin() {
	echo "Copying system files" | msg -2
	hi
	for bin in $SYSTEMWIDE_BINARIES; do
		which "$bin" 1>/dev/null 2>/dev/null
		CODE="$?"
		case "$CODE" in
			"0")
				echo "$bin" | msg -2 --foreground "Light Blue"
				;;
			*)
				echo "$bin" | msg -2 --foreground "Light Red" --highlight
				hi
				echo "Failure [$CODE]" | msg -2 --foreground "Brown"
				lo
				;;
		esac
		deps=""
		for dep in $(lddtree $(which $bin 2>/dev/null)); do
			deps="$deps $dep"

			if test -f "$1$dep"; then
				continue
			fi

			install -D "$dep" "$1$dep" 2>/dev/null
			CODE="$?"
		done
		hi
		for dep in $(echo $deps | tr ' ' '\n' | sort | uniq | tr '\n' ' '); do
			case "$CODE" in
				"0")
					echo "$dep" | msg -2 --foreground "Purple"
					;;
				*)
					CODE=""
					echo "$dep" | msg -2 --foreground "Light Red" --highlight
					hi
					echo "Failure [$CODE]" | msg -2 --foreground "Brown"
					lo
					;;
			esac
		done
		lo
	done
	lo
}

rd_gen_init() {
	echo "Creating init" | msg -2
	hi
	echo "/init" | msg -2 --foreground "Light Blue"
	initramfs_init "$1/init"
	CODE="$?"
	case "$CODE" in
		"0") ;;
		*)
			hi
			echo "Failure [$CODE]" | msg -2 --foreground "Brown"
			lo
			;;
	esac
	lo
}

rd_make_dir() {
	echo "Creating system directories" | msg -2
	hi
	for dir in "/proc" "/sys" "/dev" "/run" "/sbin" "/bin" "/etc" "/usr/sbin" "/usr/bin" "/mnt" "/tmp"; do
		mkdir -p $1$dir 2>/dev/null
		CODE="$?"
		case "$CODE" in
			"0")
				echo "$dir" | msg -2 --foreground "Light Blue"
				;;
			*)
				echo "$dir" | msg -2 --foreground "Light Red" --highlight
				hi
				echo "Failure [$CODE]" | msg -2 --foreground "Brown"
				lo
				;;
		esac
	done
	lo
}

ofs_mk_cpio() {
	SOURCE="$1"
	TARGET="$2"

	echo "Creating archive from $SOURCE to $TARGET" | msg -2 --foreground "Light Blue"
	cd "$SOURCE"
	find . -print0 | cpio --create --format "newc" --null --quiet >"$TARGET" 2>/dev/null
	cd "$OLDPWD"

	return $?
}

ofs_mk_squashfs() {
	SOURCE="$1"
	TARGET="$2"

	echo "Making SquashFS from $SOURCE to $TARGET" | msg -2 --foreground "Light Blue"
	mksquashfs "$SOURCE" "$TARGET" -quiet 1>/dev/null

	return $?
}

ofs_mk_squashfs_xz() {
	SOURCE="$1"
	TARGET="$2"

	echo "Making SquashFS from $SOURCE to $TARGET" | msg -2 --foreground "Light Blue"
	mksquashfs "$SOURCE" "$TARGET" -quiet -b "$((1024 * 1024))" -comp "xz" -Xdict-size "100%" 1>/dev/null

	return $?
}

cruxstrap() {
	CHROOT=""
	PORTS=""
	PACKAGES=""
	INSTALL=""
	IGNORED=""

	while test "$1"; do
		case "$1" in
			"--ports-dir") PORTS="$PORTS $2" ; shift ;;
			*)
				if test "$CHROOT" = ""; then
					CHROOT="$1"
				else
					PACKAGES="$PACKAGES $1"
				fi
				;;
		esac
		shift
	done

	echo "Bootstrapping [$CHROOT]" | msg -1
	hi

	if test "$PACKAGES" = ""; then
		for dir in $PORTS; do
			for prt in "$dir/"*; do
				INSTALL="$INSTALL $(realpath $prt)"
			done
		done
	else
		for pkg in $PACKAGES; do
			if test -f "$pkg"; then
				INSTALL="$INSTALL $(realpath $pkg)"
			else
				FAILURE="y"
				for dir in $PORTS; do
					for prt in "$dir/"*; do
						case "$prt" in
							*"/$pkg") INSTALL="$INSTALL $(realpath $prt)" ; FAILURE="" ;;
							*"/$pkg#"*) INSTALL="$INSTALL $(realpath $prt)" ; FAILURE="" ;;
						esac
					done
				done
			fi
			if test "$FAILURE" = "y"; then
				IGNORED="$IGNORED $pkg"
			fi
		done
	fi

	if test "$IGNORED"; then
		echo "Packages ignored because none found." | msg -2
		hi
		for prt in $(echo $IGNORED | tr " " "\n" | sort | uniq | tr "\n" " "); do
			echo "$prt" | msg -2 --foreground "Light Red" --highlight
		done
		lo
	fi

	if test "$INSTALL"; then
		echo "Packages to install: $(echo $INSTALL | wc -w)" | msg -1
		mkdir -p "$CHROOT/var/lib/pkg" 2>/dev/null
		touch "$CHROOT/var/lib/pkg/db" 2>/dev/null
		hi
		for prt in $(echo $INSTALL | tr " " "\n" | sort | uniq | tr "\n" " "); do
			name="$(basename $prt)"
			name="${name%%#*}"
			pkgadd --root "$CHROOT" "$prt"
			case "$?" in
				"0")
					echo "$name" | msg -1 --foreground "Light Green"
					;;
				*)
					echo "$name" | msg -1 --foreground "Light Red" --highlight
					;;
			esac
		done
		lo
		echo "Done [$CHROOT]" | msg -1
	else
		echo "No packages selected. Nothing to do." | msg -1
	fi

	lo
	echo "Done [$CHROOT]" | msg -1
}

hi() {
	return 0
}

lo() {
	return 0
}

msg() {
	while read -r input; do
		echo "$input" >&2
	done
}

main() {
	PROGNAME="$(basename $0)"

	if test "$PROGNAME" = "boobstrap"; then

		PROGNAME="$1"

		case "$2" in
			"--help")
				cat <<EOF
$BOOBSTRAP_NAME $BOOBSTRAP_VERSION
EOF
exit 0
				;;
			"") ;;
			*) shift ;;
		esac
	fi

	case "$PROGNAME" in
		"mkbootstrap") mkbootstrap "$@" ;;
		"mkinitramfs") mkinitramfs "$@" ;;
		"mkbootisofs") mkbootisofs "$@" ;;
		"exportroot") exportroot "$@" ;;
		"importroot") importroot "$@" ;;
		"mkoverlayfs") mkoverlayfs "$@" ;;
	esac
}

preflight_checks() {
	for dep in "cpio" "mkdosfs"; do
		which "$dep" 1>/dev/null 2>/dev/null
		case "$?" in
			"0") ;;
			*) TEST="x" ;;
		esac
	done

	if test "$TEST" = "x"; then
		echo "install: cpio, dosfstools, grub, grub-efi, xorriso." | msg -2
		echo "nice to have (optional): squashfs-tools, busybox." | msg -2
		echo "if you sure is it installed check for PATH variable" | msg -2
		echo "some utilities requires root priveleges" | msg -2
		return 1
	fi

	if test "$COLOURS" = ""; then
		if which tput 1>/dev/null 2>/dev/null; then
			COLOURS="auto"
		else
			COLOURS="none"
		fi
	fi

	if test "$COLOURS" = "auto"; then
		set_color_theme 2>/dev/null
	fi
}

for BOOBSTRAP_CONF in "/etc/boobstrap/boobstrap.conf" "$HOME/.config/boobstrap/boobstrap.conf"; do
	if test -f "$BOOBSTRAP_CONF"; then
		. "$BOOBSTRAP_CONF" || exit 1
	fi
done

preflight_checks || exit 1

readonly BOOBSTRAP_NAME="BOOBSTRAP"
readonly BOOBSTRAP_VERSION="1.2"

main "$@"
