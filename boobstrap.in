#! /usr/bin/env sh

mkbootstrap() {
	DO="$1"

	case "$2" in
		"") ;;
		*) shift ;;
	esac

	case "$DO" in
		"crux_gnulinux") cruxstrap "$@" ;;
		"archlinux_gnulinux"|"arch_gnulinux") pacstrap "$@" ;;
		"manjaro_gnulinux") basestrap "$@" ;;
		"debian_gnulinux") debootstrap "$@" ;;
		"fedora_gnulinux"|"redhat_gnulinux"|"centos_gnulinux") dnf "$@" ;;
		"--help"|"-h"|"-?")
			cat <<EOF
$BOOBSTRAP_NAME $BOOBSTRAP_VERSION
Usage: mkbootstrap <system> <directory> [options]... [packages]...
Installs selected system into the directory.

  <system>                   native supported OS:
                               crux_gnulinux

                             other supported OS:
                               fedora_gnulinux *
                               redhat_gnulinux *
                               centos_gnulinux *
                               debian_gnulinux *
                               archlinux_gnulinux *
                               manjaro_gnulinux *

                             * requires external wrappers i.e.:
                               pacstrap, debootstrap and so on

  crux_gnulinux options:

  --ports-dir <directory>    directory with packages for CRUX

  [packages]                 packages to install.
                               can be package name or filename
                               if empty then selected
                               --ports-dir will be installed
EOF
exit 0
;;
	esac
}

mkoverlay() {
	DESTINATION=""
	OVERLAY=""
	FORMAT=""
	NUM=0

	while test "$1"; do
		case "$1" in
			"--destination") DESTINATION="$(realpath $2)" ; shift ;;
			"--overlay") OVERLAY="$OVERLAY $(realpath $2)" ; shift ;;
			"--format") FORMAT="$2" ; shift ;;
			"--help"|"-h")
				cat <<EOF
$BOOBSTRAP_NAME $BOOBSTRAP_VERSION
Usage: mkoverlayfs <directory> [options]...
Creates filesystem from the directory by using selected format.

  --destination <directory>  specify directory to save system

  --overlay <directory>

  --format                   select filesystem format, can be one of:
                               cpio, squashfs, squashfs-gzip, squashfs-lz???
                               squashfs-bzip2, squashfs-xz, squashfs-zstd
EOF
exit 0
				;;
		esac
		shift
	done
	if test "$DESTINATION" = ""; then
		echo "No destination directory specified" | msg -2 --foreground "Brown"
		return 1
	fi
	echo "Prepare overlays" | msg -2
	mkdir -p "$DESTINATION"
	hi
	if test "$FORMAT" = ""; then
		FORMAT="cpio"
		echo "No overlay format specified, fallback to using CPIO" | msg -2 --foreground "Brown"
	fi
	for overlay in $OVERLAY; do
		NUM="$(($NUM + 10))"
		case "$FORMAT" in
			"cpio")
				SOURCE="$overlay"
				TARGET="$DESTINATION/$NUM-$(basename $overlay).cpio"
				echo "CPIO [$SOURCE] => [$TARGET]" | msg -2 --foreground "Light Blue"
				cd "$SOURCE"
				find . -print0 | cpio --create --format "newc" --null --quiet >"$TARGET" 2>/dev/null
				CODE="$?"
				cd "$OLDPWD"
				;;
			"squashfs"|"squashfs-"*)
				SOURCE="$overlay"
				TARGET="$DESTINATION/$NUM-$(basename $overlay).squashfs"
				echo "SquashFS [$SOURCE] => [$TARGET]" | msg -2 --foreground "Light Blue"
				mksquashfs "$SOURCE" "$TARGET" -quiet 1>/dev/null
				CODE="$?"
				;;
			*)
				CODE="1"
				echo "Unknown filesystem format" | msg -2 --foreground "Brown"
				;;
		esac
		hi
		case "$CODE" in
			"0") echo "Success" | msg -2 --foreground "Light Green" ;;
			*) echo "Failure [$CODE]" | msg -2 --foreground "Brown" ;;
		esac
		lo
	done
	lo
	echo "Overlays done" | msg -2
	return "$CODE"
}

mkinitramfs() {
	DIR=""
	OUTPUT=""
	IS_STANDALONE=""
	STR_OVERLAY=""
	STR_FORMAT=""

	while test "$1"; do
		case "$1" in
			"--output") OUTPUT="$(realpath $2)" ; shift ;;
			"--standalone") IS_STANDALONE="yes" ;;
			"--overlay") STR_OVERLAY="$STR_OVERLAY --overlay $2" ; shift ;;
			"--cpio") STR_FORMAT="--format cpio" ;;
			"--squashfs") STR_FORMAT="--format squashfs" ;;
			"--squashfs-xz") STR_FORMAT="--format squashfs-xz" ;;
			"--help"|"-h")
				cat <<EOF
$BOOBSTRAP_NAME $BOOBSTRAP_VERSION
Usage: mkinitramfs <directory> [options]...
Creates bootable ram disk image from the directory.

  --output <file>            specify output file,
                               by default outputs to STDOUT

  --standalone               uses directory "as is"

  --overlay                  add overlay

  --squashfs,                pre-defined command mksquashfs
  --squashfs-xz              pre-defined command mksquashfs
EOF
exit 0
				;;
			*)
				if test "$DIR" = ""; then
					DIR="$1"
				fi
				;;
		esac
		shift
	done
	if test "$OUTPUT" = ""; then
		OUTPUT="-"
	fi
	if test "$DIR" = ""; then
		echo "Directory not selected" | msg -2 --foreground "Brown"
		return 1
	fi
	echo "Generating initramfs [$DIR]" | msg -2
	hi
	if test "$IS_STANDALONE" = ""; then
		echo "Creating system directories" | msg -2
		hi
		for dir in "/proc" "/sys" "/dev" "/run" "/sbin" "/bin" "/etc" "/usr/sbin" "/usr/bin" "/mnt" "/tmp"; do
			mkdir -p $DIR$dir 2>/dev/null
			case "$?" in
				"0") echo "$dir" | msg -2 --foreground "Light Blue" ;;
				*) echo "$dir" | msg -2 --foreground "Light Red" --highlight ;;
			esac
		done
		lo
		echo "Copying devices" | msg -2
		hi
		for dev in "console" "tty" "tty1" "null"; do
			cp -a "/dev/$dev" "$DIR/dev/$dev" 2>/dev/null
			case "$?" in
				"0") echo "/dev/$dev" | msg -2 --foreground "Light Blue" ;;
				*) echo "/dev/$dev" | msg -2 --foreground "Light Red" --highlight ;;
			esac
		done
		lo
		echo "Copying system files" | msg -2
		hi
		for bin in $SYSTEMWIDE_BINARIES; do
			which "$bin" 1>/dev/null 2>/dev/null
			CODE="$?"
			case "$CODE" in
				"0") echo "$bin" | msg -2 --foreground "Light Blue" ;;
				*) echo "$bin" | msg -2 --foreground "Light Red" --highlight ;;
			esac
			deps=""
			for dep in $(lddtree $(which $bin 2>/dev/null)); do
				deps="$deps $dep"
				if test -f "$DIR$dep"; then
					continue
				fi
				install -D "$dep" "$DIR$dep" 2>/dev/null
				CODE="$?"
			done
			hi
			for dep in $(echo $deps | tr ' ' '\n' | sort | uniq | tr '\n' ' '); do
				case "$CODE" in
					"0") echo "$dep" | msg -2 --foreground "Purple" ;;
					*) echo "$dep" | msg -2 --foreground "Light Red" --highlight ;;
				esac
			done
			lo
		done
		lo
		echo "Creating init" | msg -2
		hi
		echo "/init" | msg -2 --foreground "Light Blue"
		initramfs_init "$DIR/init"
		case "$?" in
			"0") ;;
			*) echo "Failure [$CODE]" | msg -2 --foreground "Brown" ;;
		esac
		lo
	fi
	if test "$IS_STANDALONE" = "yes"; then
		if test -a "$DIR/init"; then
			echo "Found /init" | msg -2
		else
			echo "Empty /init is now wrapper for /sbin/init" | msg -2
			echo "#! /sbin/init" > "$DIR/init"
			chmod +x "$DIR/init"
		fi
	fi
	if test "$STR_OVERLAY"; then
		mkoverlay --destination "$DIR/media/system" $STR_OVERLAY $STR_FORMAT
	fi
	echo "Creating initramfs [$OUTPUT]" | msg -2
	cd "$DIR" 2>/dev/null
	case "$OUTPUT" in
		""|"-")
			find . -print0 | cpio --create --format "newc" --null --quiet 2>/dev/null
			CODE="$?"
			;;
		*)
			find . -print0 | cpio --create --format "newc" --null --quiet > "$OUTPUT" 2>/dev/null
			CODE="$?"
			;;
	esac
	hi
	case "$CODE" in
		"0") echo "Success" | msg -2 --foreground "Light Green" ;;
		*) echo "Error while generating initramfs" | msg -2 --foreground "Brown" --highlight ;;
	esac
	lo
	cd "$OLDPWD" 2>/dev/null
	echo "Done [$OUTPUT]" | msg -2
	lo
	echo "Done [$DIR]" | msg -2
}

mkbootisofs() {
	DIR=""
	LOADER=""
	KERNEL=""
	INITRD=""
	PORTABLE=""
	BOOTABLE=""
	BOOTABLE_LEGACY_BOOT=""
	BOOTABLE_EFI=""
	ISO=""
	ISO_9660=""
	ISO_9660_LABEL=""
	ISO_9660_RUN=""
	ISO_9660_LEGACY_BOOT=""
	ISO_9660_EFI=""
	STR_OVERLAY=""
	STR_FORMAT=""

	while test "$1"; do
		case "$1" in
			"--output") ISO="$(realpath $2)" ; shift ;;
			"--loader") LOADER="$2" ; shift ;;
			"--kernel") KERNEL="$2" ; shift ;;
			"--initrd") INITRD="$2" ; shift ;;
			"--portable") PORTABLE="yes" ;;
			"--legacy-boot") BOOTABLE_LEGACY_BOOT="yes" ; ISO_9660_LEGACY_BOOT="yes" ;;
			"--efi") ISO_9660_EFI="yes" ; ISO_9660_EFI="yes" ;;
			"--bootable") BOOTABLE="yes" ;;
			"--bootable-legacy-boot") BOOTABLE_LEGACY_BOOT="yes" ;;
			"--bootable-efi") BOOTABLE_EFI="yes" ;;
			"--iso-9660") ISO_9660="yes" ;;
			"--iso-9660-label") ISO_9660_LABEL="$2" ; shift ;;
			"--iso-9660-legacy-boot") ISO_9660_LEGACY_BOOT="yes" ;;
			"--iso-9660-efi") ISO_9660_EFI="yes" ;;
			"--overlay") STR_OVERLAY="$STR_OVERLAY --overlay $2" ; shift ;;
			"--cpio") STR_FORMAT="--format cpio" ;;
			"--squashfs") STR_FORMAT="--format squashfs" ;;
			"--squashfs-xz") STR_FORMAT="--format squashfs-xz" ;;
			"--help")
				cat <<EOF
$BOOBSTRAP_NAME $BOOBSTRAP_VERSION
Usage: mkbootisofs <directory> [BOOT.ISO] [options]...
Creates BIOS and/or UEFI compatible bootable images.

  --output < file | device | - >

  --portable,                creates structure of the disk (default)
  --bootable,                makes bootable device where directory created
  --iso-9660                 additional outputs ISO

  --overlay < directory >

  --cpio,
  --squashfs

  --help
EOF
exit 0
				;;
			"-"*) echo "Unknown option: $1" | msg -2 ;;
			*)
				if test "$DIR" = ""; then
					DIR="$(realpath $1)"
				elif test "$ISO" = ""; then
					ISO="$(realpath $1)"
					ISO_9660="yes"
					ISO_9660_LEGACY_BOOT="yes"
					ISO_9660_EFI="yes"
				fi
				;;
		esac
		shift
	done
	if test "$DIR" = ""; then
		echo "No working directory selected" | msg -2 --foreground "Brown"
		return 1
	fi
	if test "$ISO_9660" = "yes"; then
		if genisoimage --version 1>/dev/null 2>/dev/null; then
			ISO_9660_RUN="genisoimage"
		fi
		if xorrisofs --version 1>/dev/null 2>/dev/null; then
			ISO_9660_RUN="xorrisofs"
		fi
		if test "$ISO_9660_RUN" = ""; then
			echo "None of cdrkit or xorriso found." | msg -2 --foreground "Brown"
			return 1
		fi
	fi
	for dir in "$SYSLINUX_PATH" "/usr/share/syslinux" "/usr/lib/syslinux/bios"; do
		if test -f "$dir/gptmbr.bin"; then
			SYSLINUX_DATA="$(($SYSLINUX_DATA + 1))"
			SYSLINUX_BIOS_GPT="$dir/gptmbr.bin"
		fi
		if test -f "$dir/mbr.bin"; then
			SYSLINUX_DATA="$(($SYSLINUX_DATA + 1))"
			SYSLINUX_BIOS_MBR="$dir/mbr.bin"
		fi
	done
	for dir in "$GRUB_PATH" "/usr/lib/grub/i386-pc" "/lib/grub/i386-pc"; do
		if test -f "$dir/cdboot.img"; then
			GRUB_DATA="$(($GRUB_DATA + 1))"
			GRUB_BIOS_CDBOOT="$dir/cdboot.img"
		fi
		if test -f "$dir/boot_hybrid.img"; then
			GRUB_DATA="$(($GRUB_DATA + 1))"
			GRUB_BIOS_HYBRID="$dir/boot_hybrid.img"
		fi
	done
	if test "$LOADER" = ""; then
		if test "$SYSLINUX_DATA" = "2"; then
			LOADER="SYSLINUX"
		fi
		if test "$GRUB_DATA" = "2"; then
			LOADER="GRUB2"
		fi
		if test "$LOADER" = ""; then
			echo "None of syslinux or grub2 found." | msg -2 --foreground "Brown"
			return 1
		fi
	fi
	if test "$LOADER" = "SYSLINUX"; then
		if test "$SYSLINUX_DATA" = "2"; then
			LOADER="SYSLINUX"
		else
			echo "Can't find SYSLINUX files, try export SYSLINUX_PATH=/usr/lib/syslinux or something" | msg -2 --foreground "Brown"
			return 1
		fi
	fi
	if test "$LOADER" = "GRUB2"; then
		if test "$GRUB_DATA" = "2"; then
			LOADER="GRUB2"
		else
			echo "Can't find GRUB2 files, try export GRUB_PATH=/usr/lib/grub or something" | msg -2 --foreground "Brown"
			return 1
		fi
	fi
	echo "Creating bootable filesystem [$DIR]" | msg -2
	hi
	if test "$LOADER" = "SYSLINUX"; then
		if test -f "$DIR/boot/syslinux/syslinux.cfg"; then
			echo "Keep SYSLINUX config" | msg -2 --foreground "Purple"
		elif test -f "/etc/boobstrap/syslinux.conf"; then
			mkdir -p "$DIR/boot/syslinux"
			cp "/etc/boobstrap/syslinux.conf" "$DIR/boot/syslinux/syslinux.cfg"
			echo "Configure SYSLINUX" | msg -2 --foreground "Purple"
		else
			echo "Failed to configure SYSLINUX" | msg -2 --foreground "Brown"
		fi
	fi
	if test "$LOADER" = "GRUB2"; then
		if test -f "$DIR/boot/grub/grub.cfg"; then
			echo "Keep GRUB2 config" | msg -2 --foreground "Purple"
		elif test -f "/etc/boobstrap/grub.conf"; then
			mkdir -p "$DIR/boot/grub"
			cp "/etc/boobstrap/grub.conf" "$DIR/boot/grub/grub.cfg"
			echo "Configure GRUB2" | msg -2 --foreground "Purple"
		else
			echo "Failed to configure GRUB2" | msg -2 --foreground "Brown"
		fi
	fi
	if test "$BOOTABLE" = "yes"; then
		DEV="$(df $DIR | tail -n 1 | tr -s " " | cut -d " " -f 1 | sed -r "s:[0-9]+\$::" | sed -r "s:([0-9])[a-z]+\$:\\1:i")"
		TYP="$(fdisk -l $DEV | grep Disklabel\ type: | cut -d " " -f 3)"
		echo "Creating bootable device [$DEV]" | msg -2
		hi
		if test "$LOADER" = "SYSLINUX"; then
			echo "Installing SYSLINUX" | msg -2 --foreground "Light Blue"
			case "$TYP" in
				"dos") SYSLINUX_BIOS_BIOSLOADER="$SYSLINUX_BIOS_MBR" ;;
				"gpt") SYSLINUX_BIOS_BIOSLOADER="$SYSLINUX_BIOS_GPT" ;;
			esac
			cat "$SYSLINUX_BIOS_BIOSLOADER" > $DEV
			hi
			echo "SYSLINUX says:" | msg -2 --foreground "Light Blue"
			extlinux --install "$DIR/boot/syslinux" 2>&1 | msg -2 --foreground "Light Cyan" --background "Light Blue"
			lo
		fi
		if test "$LOADER" = "GRUB2"; then
			echo "Installing GRUB2" | msg -2 --foreground "Light Blue"
			hi
			echo "GRUB2 says:" | msg -2 --foreground "Light Blue"
			grub-install				\
				--boot-directory="$DIR/boot"	\
				--target="x86_64-efi"		\
				--removable			\
				--efi-directory="$DIR"		\
				--recheck 2>&1 | msg -2 --foreground "Light Cyan" --background "Light Blue"
			grub-install "$DEV"			\
				--boot-directory="$DIR/boot"	\
				--target="i386-pc"		\
				--recheck 2>&1 | msg -2 --foreground "Light Cyan" --background "Light Blue"
			lo
		fi
		lo
		echo "Done [$DEV]" | msg -2
	fi
	if test "$STR_OVERLAY"; then
		mkoverlay --destination "$DIR/system" $STR_OVERLAY $STR_FORMAT
	fi
	if test "$ISO_9660" = "yes"; then
		if test "$ISO" = ""; then
			ISO="-"
		fi
		echo "Burning ISO [$ISO]" | msg -2
		hi
		#if test "$LOADER" = "SYSLINUX"; then
		#fi
		if test "$LOADER" = "GRUB2"; then
			if test "$ISO_9660_LEGACY_BOOT" = "yes"; then
				ISO_9660_LEGACY_BOOT="-b boot/grub/bios.img -no-emul-boot -boot-load-size 4 -boot-info-table"
				grub-mkstandalone \
					--format="i386-pc" \
					--output="$DIR/boot/grub/grub.raw" \
					--install-modules="linux16 linux normal iso9660 biosdisk memdisk test search" \
					--modules="linux16 linux normal iso9660 biosdisk memdisk test search" \
					--locales="" \
					--fonts="" \
					--themes="" \
					"/boot/grub/grub.cfg=$DIR/boot/grub/grub.cfg"
				cat "$GRUB_BIOS_CDBOOT" "$DIR/boot/grub/grub.raw" > $DIR/boot/grub/bios.img
			fi
			if test "$ISO_9660_EFI" = "yes"; then
				ISO_9660_EFI="-eltorito-alt-boot -e boot/grub/uefi.img -no-emul-boot"
				grub-mkstandalone \
					--format="x86_64-efi" \
					--output="$DIR/boot/grub/grub.efi" \
					--modules="" \
					--locales="" \
					--fonts="" \
					--themes="" \
					"/boot/grub/grub.cfg=$DIR/boot/grub/grub.cfg"
				truncate -s "10MB" "$DIR/boot/grub/uefi.img"
				mkdosfs "$DIR/boot/grub/uefi.img"
				mkdir "$DIR/uefi"
				mount "$DIR/boot/grub/uefi.img" "$DIR/uefi"
				mkdir "$DIR/uefi/EFI"
				mkdir "$DIR/uefi/EFI/BOOT"
				cp "$DIR/boot/grub/grub.efi" "$DIR/uefi/EFI/BOOT/BOOTX64.EFI"
				umount "$DIR/uefi"
				rmdir "$DIR/uefi"
			fi
		fi
		if test "$ISO_9660_RUN" = "genisoimage"; then
			genisoimage -v -J -r -V "$ISO_9660_LABEL" -A "$ISO_9660_LABEL" \
				$ISO_9660_LEGACY_BOOT \
				-o "$ISO" "$DIR"
			CODE="$?"
			if test "$LOADER" = "SYSLINUX"; then
				if test -f "$ISO"; then
					if test "$ISO_9660_EFI"; then
						isohybrid --uefi "$ISO"
					else
						isohybrid "$ISO"
					fi
				fi
			fi
		fi
		if test "$ISO_9660_RUN" = "xorrisofs"; then
			xorrisofs -v -J -r -V "$ISO_9660_LABEL" -A "$ISO_9660_LABEL" \
				$ISO_9660_LEGACY_BOOT \
				$ISO_9660_EFI \
				-o "$ISO" "$DIR"
			CODE="$?"
		fi
		case "$CODE" in
			"0") echo "Success" | msg -2 --foreground "Light Green" ;;
			*) echo "Failure [$CODE]" | msg -2 --foreground "Brown" ;;
		esac
		lo
		echo "Done ISO [$ISO]" | msg -2
	fi
	lo
	echo "Done [$DIR]" | msg -2
}

exportroot() {
	CODE=""
	DIR=""
	while test "$1"; do
		case "$1" in
			*)
				if test "$DIR" = ""; then
					DIR="$1"
				fi
				;;
		esac
		shift
	done
	if test -d "$DIR"; then
		echo "Export chroot [$DIR]" | msg -2
		hi
		cd "$DIR"
		find . -print0 | cpio --create --format "newc" --null --quiet 2>/dev/null
		CODE="$?"
		case "$CODE" in
			"0")
				echo "Export success" | msg -2 --foreground "Light Green"
				;;
			*)
				echo "Export failed" | msg -2 msg -2 --foreground "Brown"
				;;
		esac
		cd "$OLDPWD"
		lo
		echo "Done [$DIR]" | msg -2
	else
		echo "No such directory [$DIR] for export" | msg -2 --foreground "Brown"
	fi
	return "$CODE"
}

importroot() {
	CODE=""
	DIR=""
	while test "$1"; do
		case "$1" in
			*)
				if test "$DIR" = ""; then
					DIR="$1"
				fi
				;;
		esac
		shift
	done
	if test -d "$DIR"; then
		echo "Import chroot [$DIR]" | msg -2
		hi
		cd "$DIR"
		cpio --extract --make-directories --format "newc" --quiet 1>/dev/null 2>/dev/null
		CODE="$?"
		case "$CODE" in
			"0")
				echo "Import success" | msg -2 --foreground "Light Green"
				;;
			*)
				echo "Import failed [$CODE]" | msg -2 --foreground "Brown"
				;;
		esac
		cd "$OLDPWD"
		lo
		echo "Done [$DIR]" | msg -2
	else
		echo "No such directory [$DIR] for import" | msg -2 --foreground "Brown"
	fi
	return "$CODE"
}

lddtree() {
	if test "$1" = ""; then
		return 0
	fi

	echo "$1"

	for dep in $(ldd "$1" | awk 'BEGIN{ORS="\n"}$1~/^\//{print $1}$3~/^\//{print $3}'); do
		lddtree "$dep"
	done
}

pkgadd() {
	CHROOT="/"

	# NOTABUG
	# behavior like original pkgadd
	while test "$2"; do
		case "$1" in
			"--root"|"-r") CHROOT="$2" ; shift ;;
			*) echo "invalid option $1" 1>&2 ; return 1 ;;
		esac
		shift
	done

	name="${1}"
	name="${name##*/}"
	name="${name%%.pkg*}"
	name="${name%%\#*}"

	version="${1}"
	version="${version##*/}"
	version="${version%%.pkg*}"
	version="${version##*\#}"

	echo "$name" >> "$CHROOT/var/lib/pkg/db" 2>/dev/null		|| return 1
	echo "$version" >> "$CHROOT/var/lib/pkg/db" 2>/dev/null		|| return 1
	tar -xpvf "$1" \
		--xattrs-include="*.*" \
		--numeric-owner \
		--directory "$CHROOT" >> "$CHROOT/var/lib/pkg/db" \
		2>/dev/null						|| return 1
	echo "" >> "$CHROOT/var/lib/pkg/db" 2>/dev/null			|| return 1
}

cruxstrap() {
	CHROOT=""
	PORTS=""
	PACKAGES=""
	INSTALL=""
	IGNORED=""

	while test "$1"; do
		case "$1" in
			"--ports-dir") PORTS="$PORTS $2" ; shift ;;
			*)
				if test "$CHROOT" = ""; then
					CHROOT="$1"
				else
					PACKAGES="$PACKAGES $1"
				fi
				;;
		esac
		shift
	done

	echo "Bootstrapping [$CHROOT]" | msg -1
	hi

	if test "$PACKAGES" = ""; then
		for dir in $PORTS; do
			for prt in "$dir/"*; do
				INSTALL="$INSTALL $(realpath $prt)"
			done
		done
	else
		for pkg in $PACKAGES; do
			if test -f "$pkg"; then
				INSTALL="$INSTALL $(realpath $pkg)"
			else
				FAILURE="y"
				for dir in $PORTS; do
					for prt in "$dir/"*; do
						case "$prt" in
							*"/$pkg") INSTALL="$INSTALL $(realpath $prt)" ; FAILURE="" ;;
							*"/$pkg#"*) INSTALL="$INSTALL $(realpath $prt)" ; FAILURE="" ;;
						esac
					done
				done
			fi
			if test "$FAILURE" = "y"; then
				IGNORED="$IGNORED $pkg"
			fi
		done
	fi

	if test "$IGNORED"; then
		echo "Packages ignored because none found." | msg -2
		hi
		for prt in $(echo $IGNORED | tr " " "\n" | sort | uniq | tr "\n" " "); do
			echo "$prt" | msg -2 --foreground "Light Red" --highlight
		done
		lo
	fi

	if test "$INSTALL"; then
		echo "Packages to install: $(echo $INSTALL | wc -w)" | msg -1
		mkdir -p "$CHROOT/var/lib/pkg" 2>/dev/null
		touch "$CHROOT/var/lib/pkg/db" 2>/dev/null
		hi
		for prt in $(echo $INSTALL | tr " " "\n" | sort | uniq | tr "\n" " "); do
			name="$(basename $prt)"
			name="${name%%#*}"
			pkgadd --root "$CHROOT" "$prt"
			case "$?" in
				"0")
					echo "$name" | msg -1 --foreground "Light Green"
					;;
				*)
					echo "$name" | msg -1 --foreground "Light Red" --highlight
					;;
			esac
		done
		lo
		echo "Done [$CHROOT]" | msg -1
	else
		echo "No packages selected. Nothing to do." | msg -1
	fi

	lo
	echo "Done [$CHROOT]" | msg -1
}

main() {
	PROGNAME="$(basename $0)"

	if test "$PROGNAME" = "boobstrap"; then

		PROGNAME="$1"

		case "$2" in
			"--help")
				cat <<EOF
$BOOBSTRAP_NAME $BOOBSTRAP_VERSION
EOF
exit 0
				;;
			"") ;;
			*) shift ;;
		esac
	fi

	case "$PROGNAME" in
		"mkbootstrap") mkbootstrap "$@" ;;
		"mkinitramfs") mkinitramfs "$@" ;;
		"mkbootisofs") mkbootisofs "$@" ;;
		"exportroot") exportroot "$@" ;;
		"importroot") importroot "$@" ;;
		"mkoverlayfs") mkoverlay "$@" ;;
	esac
}

hi() {
	return 0
}

lo() {
	return 0
}

msg() {
	while read -r input; do
		echo "$input" >&2
	done
}

for BOOBSTRAP_CONF in "/etc/boobstrap/boobstrap.conf" "$HOME/.config/boobstrap/boobstrap.conf"; do
	if test -f "$BOOBSTRAP_CONF"; then
		. "$BOOBSTRAP_CONF" || exit 1
	fi
done

readonly BOOBSTRAP_NAME="BOOBSTRAP"
readonly BOOBSTRAP_VERSION="1.2"

main "$@"
