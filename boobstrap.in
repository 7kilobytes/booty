#! /bin/sh -

#
# CORE
#

mkbootstrap() {
	case "$1" in
		"import") shift ; importroot "$@" ;;
		"export") shift ; exportroot "$@" ;;
		"crux_gnulinux") shift ; cruxstrap "$@" ;;
		"archlinux_gnulinux"|"arch_gnulinux") shift ; pacstrap "$@" ;;
		"manjaro_gnulinux") shift ; basestrap "$@" ;;
		"debian_gnulinux") shift ; debootstrap "$@" ;;
	esac
}

mkinitramfs() {
	CHROOT=""
	IMAGE=""
	IS_STANDALONE=""
	IS_OVERLAY=""
	OVERLAYS=""
	COMMAND=""

	while test "$1"; do
		case "$1" in
			"--output") IMAGE="$(realpath $2)" ; shift ;;
			"--standalone") IS_STANDALONE="yes" ;;
			"--overlay") IS_OVERLAY="yes" ; OVERLAYS="$OVERLAYS $2" ; shift ;;
			"--command") COMMAND="$2" ; shift ;;
			"--squashfs") COMMAND="mksquashfs \${SOURCE} \${DESTINATION} -quiet 2>/dev/null" ;;
			"--squashfs-xz") COMMAND="mksquashfs \${SOURCE} \${DESTINATION} -quiet -b $((1024 * 1024)) -comp xz -Xdict-size 100% 2>/dev/null" ;;
			*)
				if test "$CHROOT" = ""; then
					CHROOT="$1"
				fi
				;;
		esac
		shift
	done

	echo "Generating initramfs [$CHROOT]" | msg -2
	hi

	if test "$CHROOT" = ""; then
		CHROOT="."
	fi

	if test "$IS_STANDALONE" = "yes"; then
		IS_OVERLAY="no"
	fi

	if test "$IS_OVERLAY" = "yes"; then

		rd_make_dir "$CHROOT"

		rd_copy_dev "$CHROOT"

		rd_copy_bin "$CHROOT"

		rd_gen_init "$CHROOT"

		if test "$COMMAND" = ""; then
			COMMAND="cp -a \${SOURCE} \${DESTINATION} 2>/dev/null"
		fi

		NUM=0

		echo "Prepare overlays" | msg -2
		hi
		for overlay in $OVERLAYS; do
			NUM="$(($NUM + 10))"
			SOURCE="$overlay"
			DESTINATION="$CHROOT/overlays/$NUM-$(basename $overlay)"
			echo "$COMMAND" | msg -2 --foreground "Light Blue"
			eval "$COMMAND" 1>&2
			CODE="$?"
			hi
			case "$CODE" in
				"0")
					echo "Success" | msg -2 --foreground "Light Green"
					;;
				*)
					echo "Failure [$CODE]" | msg -2 --foreground "Brown"
					hi
					echo "$COMMAND" | msg -2 --foreground "Light Red" --highlight
					lo
					;;
			esac
			lo
		done
		lo
		echo "Overlays done" | msg -2
	fi

	echo "Creating initramfs [$IMAGE]" | msg -2

	cd "$CHROOT" 2>/dev/null
	case "$IMAGE" in
		""|"-") find . -print0 | cpio --create --format "newc" --null --quiet 2>/dev/null ; STATUS="$?" ;;
		*) find . -print0 | cpio --create --format "newc" --null --quiet > "$IMAGE" 2>/dev/null ; STATUS="$?" ;;
	esac
	hi
	case "$STATUS" in
		"0")
			echo "Success" | msg -2 --foreground "Light Green"
			;;
		*)
			echo "Error while generating initramfs" | msg -2 --foreground "Brown" --highlight
			;;
	esac
	lo
	cd "$OLDPWD" 2>/dev/null

	echo "Done [$IMAGE]" | msg -2

	lo
	echo "Done [$CHROOT]" | msg -2
}

iso_bootloader_conf() {
	if test -f "$1/boot/grub.cfg"; then
		echo "Keep pre-installed configuration" | msg -2 --foreground "Purple"
	elif bootloader_conf >/dev/null 2>&1; then
		echo "Writing grub configuration" | msg -2 --foreground "Purple"
		mkdir -p "$1/boot/grub" 2>/dev/null
		bootloader_conf 2>/dev/null >> "$1/boot/grub/grub.cfg"
		bootloader_menu 2>/dev/null >> "$1/boot/grub/grub.cfg"
	else
		echo "Bootloader configuration failed to install" | msg -2 --foreground "Brown"
	fi
}

mkbootisofs() {
	DIR=""
	IMAGE=""

	while test "$1"; do
		case "$1" in
			"--output") IMAGE="$2" ; shift ;;
			*)
				if test "$DIR" = ""; then
					DIR="$1"
				fi
				;;
		esac
		shift
	done

	if test "$DIR" = ""; then
		DIR="."
	fi

	echo "Creating ISO [$DIR]" | msg -2
	hi

	iso_bootloader_conf "$DIR"

	echo "Generate BIOS bootloader" | msg -2 --foreground "Purple"
	hi

	grub-mkstandalone \
		--format="i386-pc" \
		--output="$DIR/boot/grub/grub.raw" \
		--install-modules="linux16 linux normal iso9660 biosdisk memdisk test search" \
		--modules="linux16 linux normal iso9660 biosdisk memdisk test search" \
		--locales="" \
		--fonts="" \
		--themes="" \
		"/boot/grub/grub.cfg=$DIR/boot/grub/grub.cfg" \
		>/dev/null 2>&1

	case "$?" in
		"0") ;;
		*) echo "Failure [$?]" | msg -2 --foreground "Brown" ;;
	esac
	lo

	echo "Copying BIOS bootloader" | msg -2 --foreground "Purple"
	hi

	cat "$GRUB_i386_CDBOOT" "$DIR/boot/grub/grub.raw" > "$DIR/boot/grub/bios.img" 2>/dev/null

	case "$?" in
		"0") ;;
		*) echo "Failure [$?]" | msg -2 --foreground "Brown" ;;
	esac
	lo

	echo "Generate UEFI bootloader" | msg -2 --foreground "Purple"
	hi

	grub-mkstandalone \
		--format="x86_64-efi" \
		--output="$DIR/boot/grub/grub.efi" \
		--modules="" \
		--locales="" \
		--fonts="" \
		--themes="starfield" \
		"/boot/grub/grub.cfg=$DIR/boot/grub/grub.cfg" \
		$GRUB_FONT \
		>/dev/null 2>&1

	case "$?" in
		"0") ;;
		*) echo "Failure [$?]" | msg -2 --foreground "Brown" ;;
	esac

	echo "Creating UEFI (FAT32) partition" | msg -2 --foreground "Purple"
	hi

	echo "Writing empty partition" | msg -2 --foreground "Purple"
	hi
	truncate -s "10MB" "$DIR/boot/grub/uefi.img" 2>/dev/null
	case "$?" in
		"0") ;;
		*) echo "Failure [$?]" | msg -2 --foreground "Brown" ;;
	esac
	lo

	echo "Formatting empty partition to FAT32" | msg -2 --foreground "Purple"
	hi
	mkdosfs "$DIR/boot/grub/uefi.img" 2>/dev/null
	case "$?" in
		"0") ;;
		*) echo "Failure [$?]" | msg -2 --foreground "Brown" ;;
	esac
	lo

	echo "Mounting UEFI (FAT32) partition" | msg -2 --foreground "Purple"
	hi
	mkdir "$DIR/uefi" 2>/dev/null
	mount "$DIR/boot/grub/uefi.img" "$DIR/uefi" 2>/dev/null
	case "$?" in
		"0") ;;
		"32") echo "root priveleges required for mount" | msg -2 --foreground "Light Red" --highlight ;;
		*) echo "Failure [$?]" | msg -2 --foreground "Brown" ;;
	esac
	lo

	echo "Copying UEFI bootloader to UEFI (FAT32) partition" | msg -2 --foreground "Purple"
	hi
	mkdir "$DIR/uefi/EFI" 2>/dev/null
	mkdir "$DIR/uefi/EFI/BOOT" 2>/dev/null
	cp "$DIR/boot/grub/grub.efi" "$DIR/uefi/EFI/BOOT/BOOTX64.EFI" 2>/dev/null
	case "$?" in
		"0") ;;
		*) echo "Failure [$?]" | msg -2 --foreground "Brown" ;;
	esac
	lo

	echo "Unmounting UEFI (FAT32) partition" | msg -2 --foreground "Purple"
	hi
	umount "$DIR/uefi" 2>/dev/null
	case "$?" in
		"0") ;;
		"32") echo "root priveleges required for umount" | msg -2 --foreground "Light Red" --highlight ;;
		*) echo "Failure [$?]" | msg -2 --foreground "Brown" ;;
	esac
	lo

	rmdir "$DIR/uefi" 2>/dev/null

	lo
	lo

	echo "Writing BIOS/UEFI bootable ISO image [$IMAGE]" | msg -2 --foreground "Purple"
	hi

	xorriso -as "mkisofs" \
		-iso-level 3 \
		-full-iso9660-filenames \
		--grub2-boot-info \
		--grub2-mbr "$GRUB_i386_HYBRID" \
		--boot-catalog-hide \
		-eltorito-boot "boot/grub/bios.img" \
		-no-emul-boot \
		-boot-load-size 4 \
		-boot-info-table \
		-eltorito-alt-boot \
		-e "boot/grub/uefi.img" \
		-no-emul-boot \
		-append_partition 2 "0xEF" "$DIR/boot/grub/uefi.img" \
		-graft-points \
		-quiet \
		-output - \
		"$DIR" 2>"/dev/null"

	case "$?" in
		"0") ;;
		*) echo "Failure [$?]" | msg -2 --foreground "Brown" ;;
	esac
	lo

	lo
	echo "Done [$DIR]" | msg -2
}

#
# RUNTIME LIBRARY
#

lddtree() {
	if test "$1" = ""; then
		return 0
	fi

	echo "$1"

	for dep in $(ldd "$1" | awk 'BEGIN{ORS="\n"}$1~/^\//{print $1}$3~/^\//{print $3}'); do
		lddtree "$dep"
	done
}

pkgadd() {
	CHROOT="/"

	# NOTABUG
	# behavior like original pkgadd
	while test "$2"; do
		case "$1" in
			"--root"|"-r") CHROOT="$2" ; shift ;;
			*) echo "invalid option $1" 1>&2 ; return 1 ;;
		esac
		shift
	done

	name="${1}"
	name="${name##*/}"
	name="${name%%.pkg*}"
	name="${name%%\#*}"

	version="${1}"
	version="${version##*/}"
	version="${version%%.pkg*}"
	version="${version##*\#}"

	echo "$name" >> "$CHROOT/var/lib/pkg/db" 2>/dev/null		|| return 1
	echo "$version" >> "$CHROOT/var/lib/pkg/db" 2>/dev/null		|| return 1
	tar -xpvf "$1" \
		--xattrs-include="*.*" \
		--numeric-owner \
		--directory "$CHROOT" >> "$CHROOT/var/lib/pkg/db" \
		2>/dev/null						|| return 1
	echo "" >> "$CHROOT/var/lib/pkg/db" 2>/dev/null			|| return 1
}

hi() {
	export ECHO_INDENT="$ECHO_INDENT  "
}

lo() {
	export ECHO_INDENT="${ECHO_INDENT%??}"
}

msg() {
	STDOUT=""
	STDERR=""
	fore=""
	back=""
	ctrl=""
	sgr0=""
	while test "$1"; do
		case "$1" in
			"-1")		STDOUT="yes" ;;
			"-2")		STDERR="yes" ;;
			"--foreground")	fore="$2" ; shift ; ;;
			"--background")	back="$2" ; shift ; ;;
			"--highlight")	ctrl="$ctrl$SWITCH_HIGHLIGHT" ; ;;
			"--bold")	ctrl="$ctrl$SWITCH_BOLD" ; ;;
		esac
		shift
	done
	case "$fore" in
		"00"|"0"|"White")	fore="$FOREGROUND_00" ;;
		"01"|"1"|"Black")	fore="$FOREGROUND_01" ;;
		"02"|"2"|"Blue")	fore="$FOREGROUND_02" ;;
		"03"|"3"|"Green")	fore="$FOREGROUND_03" ;;
		"04"|"4"|"Light Red")	fore="$FOREGROUND_04" ;;
		"05"|"5"|"Brown")	fore="$FOREGROUND_05" ;;
		"06"|"6"|"Purple")	fore="$FOREGROUND_06" ;;
		"07"|"7"|"Orange")	fore="$FOREGROUND_07" ;;
		"08"|"8"|"Yellow")	fore="$FOREGROUND_08" ;;
		"09"|"9"|"Light Green")	fore="$FOREGROUND_09" ;;
		"10"|"Cyan")		fore="$FOREGROUND_10" ;;
		"11"|"Light Cyan")	fore="$FOREGROUND_11" ;;
		"12"|"Light Blue")	fore="$FOREGROUND_12" ;;
		"13"|"Pink")		fore="$FOREGROUND_13" ;;
		"14"|"Grey")		fore="$FOREGROUND_14" ;;
		"15"|"Light Grey")	fore="$FOREGROUND_15" ;;
		*)			fore="$FOREGROUND_DEFAULT" ;;
	esac
	case "$back" in
		"00"|"0"|"White")	back="$BACKGROUND_00" ;;
		"01"|"1"|"Black")	back="$BACKGROUND_01" ;;
		"02"|"2"|"Blue")	back="$BACKGROUND_02" ;;
		"03"|"3"|"Green")	back="$BACKGROUND_03" ;;
		"04"|"4"|"Light Red")	back="$BACKGROUND_04" ;;
		"05"|"5"|"Brown")	back="$BACKGROUND_05" ;;
		"06"|"6"|"Purple")	back="$BACKGROUND_06" ;;
		"07"|"7"|"Orange")	back="$BACKGROUND_07" ;;
		"08"|"8"|"Yellow")	back="$BACKGROUND_08" ;;
		"09"|"9"|"Light Green")	back="$BACKGROUND_09" ;;
		"10"|"Cyan")		back="$BACKGROUND_10" ;;
		"11"|"Light Cyan")	back="$BACKGROUND_11" ;;
		"12"|"Light Blue")	back="$BACKGROUND_12" ;;
		"13"|"Pink")		back="$BACKGROUND_13" ;;
		"14"|"Grey")		back="$BACKGROUND_14" ;;
		"15"|"Light Grey")	back="$BACKGROUND_15" ;;
		*)			back="$BACKGROUND_DEFAULT" ;;
	esac
	if test "$fore$back$ctrl"; then
		sgr0="$(tput sgr0)"
	fi
	if test "$COLOURS" = "none"; then
		fore=""
		back=""
		ctrl=""
		sgr0=""
	fi
	if test "$STDOUT" = "yes"; then
		while read input; do
			echo "$ECHO_INDENT$fore$back$ctrl$input$sgr0" >&1
		done
	fi
	if test "$STDERR" = "yes"; then
		while read input; do
			echo "$ECHO_INDENT$fore$back$ctrl$input$sgr0" >&2
		done
	fi
}

rd_copy_dev() {
	echo "Copying devices" | msg -2
	hi
	for dev in "console" "tty" "tty1" "null"; do
		cp -a "/dev/$dev" "$1/dev/$dev" 2>/dev/null
		CODE="$?"
		case "$CODE" in
			"0")
				echo "/dev/$dev" | msg -2 --foreground "Light Blue"
				;;
			*)
				echo "/dev/$dev" | msg -2 --foreground "Light Red" --highlight
				hi
				echo "Failure [$CODE]" | msg -2 --foreground "Brown"
				lo
				;;
		esac
	done
	lo
}

rd_copy_bin() {
	echo "Copying system files" | msg -2
	hi
	SYSTEMWIDE_BINARIES="$(initramfs_systemwide_bin 2>/dev/null)"
	if test "$SYSTEMWIDE_BINARIES" = ""; then
		SYSTEMWIDE_BINARIES="sh switch_root mount umount mkdir rmdir mv"
	fi
	for bin in $SYSTEMWIDE_BINARIES; do
		which $bin 1>/dev/null 2>/dev/null
		CODE="$?"
		case "$CODE" in
			"0")
				echo "$bin" | msg -2 --foreground "Light Blue"
				;;
			*)
				CODE=""
				echo "$bin" | msg -2 --foreground "Light Red" --highlight
				hi
				echo "Failure [$CODE]" | msg -2 --foreground "Brown"
				lo
				;;
		esac
		deps=""
		for dep in $(lddtree $(which $bin)); do
			deps="$deps $dep"

			if test -f "$1$dep"; then
				continue
			fi

			install -D "$dep" "$1$dep" 2>/dev/null
			CODE="$?"
		done
		hi
		for dep in $(echo $deps | tr ' ' '\n' | sort | uniq | tr '\n' ' '); do
			case "$CODE" in
				"0")
					echo "$dep" | msg -2 --foreground "Purple"
					;;
				*)
					CODE=""
					echo "$dep" | msg -2 --foreground "Light Red" --highlight
					hi
					echo "Failure [$CODE]" | msg -2 --foreground "Brown"
					lo
					;;
			esac
		done
		lo
	done
	lo
}

rd_gen_init() {
	echo "Creating init" | msg -2
	hi
	echo "/init" | msg -2 --foreground "Light Blue"
	initramfs_init > "$1/init" 2>/dev/null
	chmod +x "$1/init" 2>/dev/null
	CODE="$?"
	case "$CODE" in
		"0") ;;
		*)
			hi
			echo "Failure [$CODE]" | msg -2 --foreground "Brown"
			lo
			;;
	esac
	lo
}

rd_make_dir() {
	echo "Creating system directories" | msg -2
	hi
	for dir in "proc" "sys" "dev" "run" "merged" "overlay" "overlays"; do
		mkdir -p $1/$dir 2>/dev/null
		CODE="$?"
		case "$CODE" in
			"0")
				echo "/$dir" | msg -2 --foreground "Light Blue"
				;;
			*)
				echo "/$dir" | msg -2 --foreground "Light Red" --highlight
				hi
				echo "Failure [$CODE]" | msg -2 --foreground "Brown"
				lo
				;;
		esac
	done
	lo
}

boobstrap_build() {
	DIR=""
	TEMPLATE=""
	COMMAND=""

	while test "$1"; do
		case "$1" in
			"--template") TEMPLATE="$2" ; shift ;;
		esac
		shift
	done

	if test "$DIR" = ""; then
		DIR="$(mktemp -d -p $PWD 2>/dev/null)"
	fi

	if test -f "/usr/share/boobstrap/bootstrap-templates/$TEMPLATE"; then
		TEMPLATE="/usr/share/boobstrap/bootstrap-templates/$TEMPLATE"
	elif test -f "$TEMPLATE"; then
		TEMPLATE="$(realpath $TEMPLATE)"
	elif test "$TEMPLATE" = ""; then
		TEMPLATE="/usr/share/boobstrap/bootstrap-templates/default.bbuild"
	else
		echo "no such file" | msg -2
	fi

	if test -f "$TEMPLATE"; then
		echo "Building configuration [$TEMPLATE]" | msg -2
		hi
		eval $TEMPLATE $DIR
		STATUS="$?"
		lo
		case "$STATUS" in
			"0") echo "Done [$TEMPLATE]" | msg -2 ;;
			*) echo "Failed [$TEMPLATE]" | msg -2 ;;
		esac
	fi
}

boobstrap_run() {
	boobstrap_build "$@"
}

importroot() {
	DIR=""
	while test "$1"; do
		case "$1" in
			*)
				if test "$DIR" = ""; then
					DIR="$1"
				fi
				;;
		esac
		shift
	done
	if test -d "$DIR"; then
		echo "Import chroot [$DIR]" | msg -2
		hi
		cd "$DIR"
		cpio --extract --make-directories --format "newc" --quiet >/dev/null 2>&1
		CODE="$?"
		case "$CODE" in
			"0")
				echo "Import success" | msg -2 --foreground "Light Green"
				;;
			*)
				echo "Import failed [$CODE]" | msg -2 --foreground "Brown"
				;;
		esac
		cd "$OLDPWD"
		lo
		echo "Done [$DIR]" | msg -2
	else
		echo "No such directory [$DIR] for import" | msg -2 --foreground "Brown"
	fi
}

exportroot() {
	DIR=""
	while test "$1"; do
		case "$1" in
			*)
				if test "$DIR" = ""; then
					DIR="$1"
				fi
				;;
		esac
		shift
	done
	if test -d "$DIR"; then
		echo "Export chroot [$DIR]" | msg -2
		hi
		cd "$DIR"
		find . -print0 | cpio --create --format "newc" --null --quiet 2>/dev/null
		CODE="$?"
		case "$CODE" in
			"0")
				echo "Export success" | msg -2 --foreground "Light Green"
				;;
			*)
				echo "Export failed" | msg -2 msg -2 --foreground "Brown"
				;;
		esac
		cd "$OLDPWD"
		lo
		echo "Done [$DIR]" | msg -2
	else
		echo "No such directory [$DIR] for export" | msg -2 --foreground "Brown"
	fi
}

cruxstrap() {
	CHROOT=""
	PORTS=""
	PACKAGES=""
	INSTALL=""
	IGNORED=""

	while test "$1"; do
		case "$1" in
			"--ports-dir") PORTS="$PORTS $2" ; shift ;;
			*)
				if test "$CHROOT" = ""; then
					CHROOT="$1"
				else
					PACKAGES="$PACKAGES $1"
				fi
				;;
		esac
		shift
	done

	echo "Bootstrapping [$CHROOT]" | msg -1
	hi

	if test "$PACKAGES" = ""; then
		for dir in $PORTS; do
			for prt in "$dir/"*; do
				INSTALL="$INSTALL $(realpath $prt)"
			done
		done
	else
		for pkg in $PACKAGES; do
			if test -f "$pkg"; then
				INSTALL="$INSTALL $(realpath $pkg)"
			else
				FAILURE="y"
				for dir in $PORTS; do
					for prt in "$dir/"*; do
						case "$prt" in
							*"/$pkg") INSTALL="$INSTALL $(realpath $prt)" ; FAILURE="" ;;
							*"/$pkg#"*) INSTALL="$INSTALL $(realpath $prt)" ; FAILURE="" ;;
						esac
					done
				done
			fi
			if test "$FAILURE" = "y"; then
				IGNORED="$IGNORED $pkg"
			fi
		done
	fi

	if test "$IGNORED"; then
		echo "Packages ignored because none found." | msg -2
		hi
		for prt in $(echo $IGNORED | tr " " "\n" | sort | uniq | tr "\n" " "); do
			echo "$prt" | msg -2 --foreground "Light Red" --highlight
		done
		lo
	fi

	if test "$INSTALL"; then
		echo "Packages to install: $(echo $INSTALL | wc -w)" | msg -1
		mkdir -p "$CHROOT/var/lib/pkg" 2>/dev/null
		touch "$CHROOT/var/lib/pkg/db" 2>/dev/null
		hi
		for prt in $(echo $INSTALL | tr " " "\n" | sort | uniq | tr "\n" " "); do
			name="$(basename $prt)"
			name="${name%%#*}"
			pkgadd --root "$CHROOT" "$prt"
			case "$?" in
				"0")
					echo "$name" | msg -1 --foreground "Light Green"
					;;
				*)
					echo "$name" | msg -1 --foreground "Light Red" --highlight
					;;
			esac
		done
		lo
		echo "Done [$CHROOT]" | msg -1
	else
		echo "No packages selected. Nothing to do." | msg -1
	fi

	lo
	echo "Done [$CHROOT]" | msg -1
}

main() {
	PROGNAME="$(basename $0)"

	if test "$PROGNAME" = "boobstrap"; then

		PROGNAME="$1"

		if test "$2"; then
			shift
		fi

		case "$PROGNAME" in
			"build") boobstrap_build "$@" ;;
			"run") boobstrap_run "$@" ;;
			"start") boobstrap_start "$@" ;;
			"stop") boobstrap_stop "$@" ;;
			"list") boobstrap_list "$@" ;;
			"--help"|"-h") rtfm ;;
		esac

	fi

	case "$PROGNAME" in
		"mkbootstrap") mkbootstrap "$@" ;;
		"mkinitramfs") mkinitramfs "$@" ;;
		"mkbootisofs") mkbootisofs "$@" ;;
	esac
}

rtfm() {
	echo "Nothing here."
}

preflight_checks() {
	for dep in "grub-mkstandalone" "mkdosfs" "xorriso"; do
		which "$dep" 1>/dev/null 2>/dev/null
		case "$?" in
			"0") ;;
			*) TEST="x" ;;
		esac
	done

	if test "$TEST" = "x"; then
		echo "install: dosfstools, grub2, grub2-efi, xorriso."
		echo "nice to have (optional): squashfs-tools."
		echo "if you sure is it installed check for PATH variable"
		echo "some utilities requires root priveleges"
		return 1
	fi

	for dir in "/usr/lib/grub/i386-pc" "/lib/grub/i386-pc"; do
		if test -f "$dir/cdboot.img"; then
			GRUB_i386_CDBOOT="$dir/cdboot.img"
		fi
		if test -f "$dir/boot_hybrid.img"; then
			GRUB_i386_HYBRID="$dir/boot_hybrid.img"
		fi
	done

	if test "$GRUB_i386_CDBOOT" = ""; then
		echo "cdboot.img none found. install grub-pc-bin or something."
		echo "or specify file: export GRUB_i386_CDBOOT=./cdboot.img"
		return 1
	fi

	if test "$GRUB_i386_HYBRID" = ""; then
		echo "boot_hybrid.img none found. install grub-pc-bin or something."
		echo "or specify file: export GRUB_i386_HYBRID=./boot_hybrid.img"
		return 1
	fi

	for font in "/usr/lib/grub/fonts/"*".pf2" "/lib/grub/fonts/"*".pf2" "/usr/share/grub/"*".pf2"; do
		if test -f "$font"; then
			GRUB_FONT="$font"
		fi
	done
	
	if test "$GRUB_FONT" = ""; then
		echo "any *.pf2 file none found. check your grub files."
		echo "or specify file: export GRUB_FONT=./unicode.pf2"
		echo "continue to running without any font."
	else
		GRUB_FONT="/boot/grub/font.pf2=$GRUB_FONT"
	fi

	if test "$COLOURS" = ""; then
		if which tput 1>/dev/null 2>/dev/null; then
			COLOURS="auto"
		else
			COLOURS="none"
		fi
	fi

	if test "$COLOURS" = "auto"; then
		set_color_theme 2>/dev/null
	fi
}

for BOOBSTRAP_CONF in "/etc/boobstrap/boobstrap.conf" "$HOME/.config/boobstrap/boobstrap.conf"; do
	if test -f "$BOOBSTRAP_CONF"; then
		. "$BOOBSTRAP_CONF" || exit 1
	fi
done

preflight_checks || exit 1

main "$@"
