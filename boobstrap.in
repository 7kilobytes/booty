#!/bin/sh -

mkbootstrap() {
	case "$1" in
		"crux_gnulinux")
			shift
			;;
		"archlinux_gnulinux"|"arch_gnulinux")
			shift
			pacstrap "$@"
			exit 0
			;;
		"debian_gnulinux")
			shift
			debootstrap "$@"
			exit 0
			;;
		*)
			cat <<"EOF"
crux_gnulinux
archlinux_gnulinux (pacstrap)
debian_gnulinux (debootstrap)
EOF
			exit 0
			;;
	esac

	while test "$1"; do
		case "$1" in
			"--ports-dir")
				PORTS_TREE="$PORTS_TREE $2"
				shift
				;;
			*)
				if [ -z "$DIRECTORY" ]; then
					DIRECTORY="$1"
				else
					PORTS_LIST="$PORTS_LIST $1"
				fi
				;;
		esac
		shift
	done

	for dir in $PORTS_TREE; do
		for prt in $dir/*; do
			if [ "$PORTS_LIST" = "" ]; then
				PORTS="$PORTS $prt"
			else
				for chk in $PORTS_LIST; do
					case $prt in
						*"/$chk") PORTS="$PORTS $prt" ;;
						*"/$chk#"*) PORTS="$PORTS $prt" ;;
					esac
				done
			fi
		done
	done

	mkdir $DIRECTORY/var/lib/pkg -p
	touch $DIRECTORY/var/lib/pkg/db

	for prt in $PORTS; do
		echo -n "Install: $prt"
		pkgadd --root $DIRECTORY $prt
		if [ "$?" = "0" ]; then
			echo " OK"
		else
			echo " ERROR"
		fi
	done
}

pkgadd() {
	CHROOT="/"

	# NOTABUG
	# behavior like original pkgadd
	while test "$2"; do
		case "$1" in
			"--root"|"-r")
				CHROOT="$2"
				shift
				;;
			*)
				echo "invalid option $1"
				exit 1
				;;
		esac
		shift
	done

	name="${1}"
	name="${name##*/}"
	name="${name%%.pkg*}"
	name="${name%%\#*}"

	version="${1}"
	version="${version##*/}"
	version="${version%%.pkg*}"
	version="${version##*\#}"

	echo "$name" >> $CHROOT/var/lib/pkg/db
	echo "$version" >> $CHROOT/var/lib/pkg/db
	tar xpvf $1 --xattrs-include='*.*' --numeric-owner -C $CHROOT >> $CHROOT/var/lib/pkg/db
	echo "" >> $CHROOT/var/lib/pkg/db
}

mkinitramfs() {
	DIRECTORY=""
	STANDALONE_MODE=""
	OVERLAY_MODE=""
	OVERLAYS=""
	COMMAND=""
	OUTPUT=""

	while test "$1"; do
		case "$1" in
			"--standalone")
				STANDALONE_MODE="+"
				;;
			"--overlay")
				OVERLAY_MODE="+"
				OVERLAYS="$OVERLAYS $2"
				shift
				;;
			"--command")
				COMMAND="$2"
				shift
				;;
			"--output")
				OUTPUT="$2"
				shift
				;;
			*)
				if test "$DIRECTORY" = ""; then
					DIRECTORY="$1"
				fi
				;;
		esac
		shift
	done

	if [ -z "$DIRECTORY" ]; then
		DIRECTORY="."
	fi

	if [ "$STANDALONE_MODE" ]; then
		OVERLAY_MODE=""
	fi

	if [ "$OVERLAY_MODE" ]; then

		case $COMMAND in
			"") COMMAND="cp -a \${SOURCE} \${DESTINATION}" ;;
			"\${SQUASHFS_XZ}") COMMAND="mksquashfs \${SOURCE} \${DESTINATION} -b 1048576 -comp xz -Xdict-size 100%" ;;
		esac

		mkinitramfs_copy_env $DIRECTORY

		NUM=0

		for overlay in $OVERLAYS; do

			NUM="$(($NUM + 10))"
			SOURCE="$overlay"
			DESTINATION="$DIRECTORY/overlays/$NUM-overlay"

			eval "$COMMAND"

		done

	fi

	cd $DIRECTORY
	case $OUTPUT in
		""|"-") find . -print0 | cpio --null --create --format=newc --verbose ;;
		*) find . -print0 | cpio --null --create --format=newc --verbose > $OUTPUT ;;
	esac
}

mkinitramfs_copy_bin() {
	src="$1"
	dst="$2"
	dep=""

	if [ "$dst" = "" ]; then
		dst="$src"
	fi

	if [ -e "$DIRECTORY$dst" ]; then
		return
	fi

	install -D -m 0755 "$src" "$DIRECTORY$dst"

	for dep in $(ldd "$src" | grep -o '/.* '); do
		DIRECTORY=$DIRECTORY mkinitramfs_copy_bin "$dep"
	done
}

mkinitramfs_copy_env() {
	DIRECTORY="$1"

	for dir in proc sys dev run mnt overlay overlays; do
		install -d -m 0755 $DIRECTORY/$dir
	done

	for dev in console tty tty1 null; do
		cp -a "/dev/$dev" "$DIRECTORY/dev/$dev"
	done

	for bin in sh switch_root mount umount mkdir rmdir; do
		DIRECTORY=$DIRECTORY mkinitramfs_copy_bin "$(which $bin)"
	done

	get_config_init > $DIRECTORY/init

	chmod +x $DIRECTORY/init
}

mkbootisofs() {
	DIRECTORY="$1"

	mkdir -p $DIRECTORY/boot
	mkdir -p $DIRECTORY/boot/grub

	get_config_grub_cfg > $DIRECTORY/boot/grub/grub.cfg

	grub-mkstandalone \
		--format=i386-pc \
		--output=$DIRECTORY/boot/grub/grub.raw \
		--install-modules="linux16 linux normal iso9660 biosdisk memdisk search" \
		--modules="linux16 linux normal iso9660 biosdisk memdisk search" \
		--locales="" \
		--fonts="" \
		--themes="" \
		"/boot/grub/grub.cfg=$DIRECTORY/boot/grub/grub.cfg"

	cat $(locate cdboot.img) $DIRECTORY/boot/grub/grub.raw > $DIRECTORY/boot/grub/bios.img

	grub-mkstandalone \
		--format=x86_64-efi \
		--output=$DIRECTORY/boot/grub/grub.efi \
		--install-modules="linux16 linux normal iso9660 memdisk search efi_gop efi_uga font gfxterm gfxmenu png" \
		--modules="linux16 linux normal iso9660 memdisk search efi_gop efi_uga" \
		--locales="" \
		--fonts="" \
		--themes="starfield" \
		"/boot/grub/grub.cfg=$DIRECTORY/boot/grub/grub.cfg"

	temporarely_mountpoint=$(mktemp -d)
	dd if=/dev/zero of=$DIRECTORY/boot/grub/uefi.img status=none count=8 bs=1M
	mkdosfs $DIRECTORY/boot/grub/uefi.img
	mount $DIRECTORY/boot/grub/uefi.img $temporarely_mountpoint
	mkdir $temporarely_mountpoint/EFI
	mkdir $temporarely_mountpoint/EFI/BOOT
	cp $DIRECTORY/boot/grub/grub.efi $temporarely_mountpoint/EFI/BOOT/BOOTX64.EFI
	umount $temporarely_mountpoint
	rmdir $temporarely_mountpoint

	xorriso -as mkisofs \
		-iso-level 3 \
		-full-iso9660-filenames \
		-eltorito-boot boot/grub/bios.img \
		-no-emul-boot \
		-boot-load-size 4 \
		-boot-info-table \
		--boot-catalog-hide \
		--grub2-boot-info \
		--grub2-mbr $(locate boot_hybrid.img) \
		-eltorito-alt-boot \
		-e boot/grub/uefi.img \
		-no-emul-boot \
		-append_partition 2 0xef $DIRECTORY/boot/grub/uefi.img \
		-graft-points \
		-quiet \
		-output - \
		"$DIRECTORY" 2>/dev/null
}

mktest() {
	BOOTIMG="$1"
	WORKDIR="$2"

	mkdir -p "$WORKDIR/cruxmedia"

	mount "$BOOTIMG" "$WORKDIR/cruxmedia"

	mkdir -p "$WORKDIR/bootstrap"

	mkbootstrap crux_gnulinux "$WORKDIR/bootstrap" --ports-dir "$WORKDIR/cruxmedia/crux/core"

	mkdir -p "$WORKDIR/initramfs"

	mkinitramfs "$WORKDIR/initramfs" \
		--overlay "$WORKDIR/bootstrap" \
		--output "$WORKDIR/initramfs.img" \
		--command "mksquashfs \${SOURCE} \${DESTINATION} -b 1048576 -comp xz -Xdict-size 100%"

	mkdir -p "$WORKDIR/bootimage"
	mkdir -p "$WORKDIR/bootimage/boot"

	for f in "/boot/vmlinuz-"* "/lib/modules/"*"/vmlinuz"; do
		if test -f "$f"; then
			cp "$f" "$WORKDIR/bootimage/boot/vmlinuz"
		fi
	done

	mv "$WORKDIR/initramfs.img" "$WORKDIR/bootimage/boot/initrd"

	mkdir -p "$WORKDIR/bootimage/crux"
	mkdir -p "$WORKDIR/bootimage/crux/core"

	cp -a "$WORKDIR/cruxmedia/crux/core" "$WORKDIR/bootimage/crux"

	mkbootisofs "$WORKDIR/bootimage" > "$WORKDIR/bootimage.iso"

	umount "$WORKDIR/cruxmedia"
}

main()
{
	PROGNAME="${0##*/}"

	if test "$PROGNAME" = "boobstrap"; then

		PROGNAME="$1"

		if test "$2"; then
			shift
		fi
	fi

	case "$PROGNAME" in
		"mkbootstrap")
			mkbootstrap "$@"
			;;
		"mkinitramfs")
			mkinitramfs "$@"
			;;
		"mkbootisofs")
			mkbootisofs "$@"
			;;
		"mktest")
			mktest "$@"
			;;
		*)
			rtfm
			;;
	esac
}

rtfm()
{
	cat <<"EOF"
WUT?
EOF

	exit 0
}

get_config_init() {
	cat <<"EOF"
#!/bin/sh

mount -t proc none /proc

echo "0" > /proc/sys/kernel/printk

mount -t sysfs none /sys

mount -t devtmpfs devtmpfs /dev

mount -t tmpfs none /run

mount -t tmpfs tmpfs /overlay

lowerdir="/lower"
upperdir="/overlay/upper"
workdir="/overlay/work"

mkdir -p $lowerdir
mkdir -p $upperdir
mkdir -p $workdir

for overlay in /overlays/*; do

	overlay_mount="/overlay/${overlay##*/}"

	lowerdir="$overlay_mount:$lowerdir"

	mkdir -p $overlay_mount

	mount -t squashfs -o ro $overlay $overlay_mount

done

mount -t overlay -o ro,lowerdir="$lowerdir",upperdir="$upperdir",workdir="$workdir" overlay /mnt

umount /proc
umount /sys
umount /dev
umount /run

exec switch_root /mnt /sbin/init
EOF
}

get_config_grub_cfg() {
	cat <<"EOF"
if loadfont /boot/grub/themes/starfield/dejavu_16.pf2; then

	insmod gfxterm
	set gfxmode=auto
	set gfxpayload=keep
	terminal_output gfxterm

	insmod png

	set theme="/boot/grub/themes/starfield/theme.txt"

fi

set menu_color_highlight=white/cyan
set menu_color_normal=black/light-gray
set color_normal=light-blue/blue

set timeout=10

set default=0

menuentry "GNU/Linux" {
	search --no-floppy --file --set root /boot/vmlinuz

	linux /boot/vmlinuz
	initrd /boot/initrd
}
EOF
}

main "$@"
