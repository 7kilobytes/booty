#! /bin/sh -

lddtree() {
	if test "$1" = ""; then
		return 0
	fi

	echo "$1"

	for dep in $(ldd "$1" | grep -o '/.* '); do
		lddtree "$dep"
	done
}

pkgadd() {
	CHROOT="/"

	# NOTABUG
	# behavior like original pkgadd
	while test "$2"; do
		case "$1" in
			"--root"|"-r") CHROOT="$2" ; shift ;;
			*) echo "invalid option $1" | msg -2 ; return 1 ;;
		esac
		shift
	done

	name="${1}"
	name="${name##*/}"
	name="${name%%.pkg*}"
	name="${name%%\#*}"

	version="${1}"
	version="${version##*/}"
	version="${version%%.pkg*}"
	version="${version##*\#}"

	echo "$name" >> "$CHROOT/var/lib/pkg/db"			|| return 1
	echo "$version" >> "$CHROOT/var/lib/pkg/db"			|| return 1
	tar -xpvf "$1" \
		--xattrs-include="*.*" \
		--numeric-owner \
		--directory "$CHROOT" >> "$CHROOT/var/lib/pkg/db"	|| return 1
	echo "" >> "$CHROOT/var/lib/pkg/db"				|| return 1
}

mkbootstrap() {
	case "$1" in
		"import") shift ; importroot "$@" ;;
		"export") shift ; exportroot "$@" ;;
		"crux_gnulinux") shift ; cruxstrap "$@" ;;
		"archlinux_gnulinux"|"arch_gnulinux") shift ; pacstrap "$@" ;;
		"debian_gnulinux") shift ; debootstrap "$@" ;;
	esac
}

importroot() {
	DIR=""
	while test "$1"; do
		case "$1" in
			*)
				if test "$DIR" = ""; then
					DIR="$1"
				fi
				;;
		esac
		shift
	done
	if test -d "$DIR"; then
		cd "$DIR"
		echo "load chroot configuration ..." | msg -2
		cpio --extract --make-directories --format "newc" --quiet 2>"/dev/null"
		case "$?" in
			"0") echo "success." | msg -2 ;;
			*) echo "failed." | msg -2 ; return 1 ;;
		esac
		cd "$OLDPWD"
	else
		echo "no such directory '$DIR'" | msg -2
	fi
}

exportroot() {
	DIR=""
	while test "$1"; do
		case "$1" in
			*)
				if test "$DIR" = ""; then
					DIR="$1"
				fi
				;;
		esac
		shift
	done
	if test -d "$DIR"; then
		cd "$DIR"
		echo "save chroot configuration ..." | msg -2
		find . -print0 | cpio --create --format "newc" --null --quiet 2>"/dev/null"
		case "$?" in
			"0") echo "success." | msg -2 ;;
			*) echo "failed." | msg -2 ; return 1 ;;
		esac
		cd "$OLDPWD"
	else
		echo "no such directory '$DIR'" | msg -2
	fi
}

cruxstrap() {
	CHROOT=""
	PORTS=""
	PACKAGES=""
	INSTALL=""
	IGNORED=""

	while test "$1"; do
		case "$1" in
			"--ports-dir") PORTS="$PORTS $2" ; shift ;;
			*)
				if test "$CHROOT" = ""; then
					CHROOT="$1"
				else
					PACKAGES="$PACKAGES $1"
				fi
				;;
		esac
		shift
	done

	for dir in $PORTS; do
		for prt in "$dir/"*; do
			if test "$PACKAGES" = ""; then
				INSTALL="$INSTALL $prt"
				continue
			fi
			for pkg in $PACKAGES; do
				if test -f "$pkg"; then
					INSTALL="$INSTALL $pkg"
				else
					case "$prt" in
						*"/$pkg") INSTALL="$INSTALL $prt" ;;
						*"/$pkg#"*) INSTALL="$INSTALL $prt" ;;
						#*) IGNORED="$(echo $IGNORED $pkg | tr ' ' '\n' | uniq | sort | tr '\n' ' ')" ;;
					esac
				fi
			done
		done
	done

	if test "$IGNORED"; then
		echo "these packages will be ignored because they doesn't exists." | msg -1
		for prt in $IGNORED; do
			echo "ignored: $prt" | msg -1
		done
	fi

	if test "$INSTALL"; then
		echo "installing chroot $CHROOT" | msg -1

		mkdir -p "$CHROOT/var/lib/pkg" || return 1
		touch "$CHROOT/var/lib/pkg/db" || return 1

		echo "installing packages." | msg -1

		for prt in $INSTALL; do
			pkgadd --root "$CHROOT" "$prt"
			case "$?" in
				"0") echo "installed: $prt" | msg -1 ;;
				*) echo "failed to install $prt. stopping." | msg -1 ; return 1 ;;
			esac
		done
	else
		echo "nothing to do." | msg -1
	fi
}

mkinitramfs() {
	CHROOT=""
	IMAGE=""
	IS_STANDALONE=""
	IS_OVERLAY=""
	OVERLAYS=""
	COMMAND=""

	while test "$1"; do
		case "$1" in
			"--output") IMAGE="$(realpath $2)" ; shift ;;
			"--standalone") IS_STANDALONE="yes" ;;
			"--overlay") IS_OVERLAY="yes" ; OVERLAYS="$OVERLAYS $2" ; shift ;;
			"--command") COMMAND="$2" ; shift ;;
			"--squashfs") COMMAND="mksquashfs \${SOURCE} \${DESTINATION} -quiet" ;;
			"--squashfs-xz") COMMAND="mksquashfs \${SOURCE} \${DESTINATION} -quiet -b $((1024 * 1024)) -comp xz -Xdict-size 100%" ;;
			*)
				if test "$CHROOT" = ""; then
					CHROOT="$1"
				fi
				;;
		esac
		shift
	done

	echo "Start generate initramfs image" | msg -2
	hi

	if test "$CHROOT" = ""; then
		CHROOT="."
	fi

	if test "$IS_STANDALONE" = "yes"; then
		IS_OVERLAY="no"
	fi

	if test "$IS_OVERLAY" = "yes"; then
		echo "Creating system directories" | msg -2

		for dir in "proc" "sys" "dev" "run" "merged" "overlay" "overlays"; do
			mkdir -p $CHROOT/$dir
		done

		echo "Copying device files" | msg -2

		for dev in "console" "tty" "tty1" "null"; do
			cp -a "/dev/$dev" "$CHROOT/dev/$dev"
		done

		echo "Installing executable files" | msg -2

		for bin in "sh" "switch_root" "mount" "umount" "mkdir" "rmdir" "mv"; do
			for dep in $(lddtree $(which $bin)); do
				if test -f "$CHROOT$dep"; then
					continue
				fi
				install -D "$dep" "$CHROOT$dep"
			done
		done

		echo "Creating init" | msg -2

		get_config_init > "$CHROOT/init"

		chmod +x "$CHROOT/init"

		NUM=0

		if test "$COMMAND" = ""; then
			COMMAND="cp -a \${SOURCE} \${DESTINATION}"
		fi

		echo "Executing custom commands" | msg -2
		hi

		for overlay in $OVERLAYS; do
			NUM="$(($NUM + 10))"
			SOURCE="$overlay"
			DESTINATION="$CHROOT/overlays/$NUM-$(basename $overlay)"
			echo "Command $COMMAND" | msg -2
			eval "$COMMAND" 1>&2
			case "$?" in
				"0") echo "Command OK" | msg -2 ;;
				*) echo "Command ERROR" | msg -2 ;;
			esac
		done

		lo
		echo "Executing done" | msg -2

	fi

	cd "$CHROOT"
	case "$IMAGE" in
		""|"-") find . -print0 | cpio -0o -H "newc" --quiet ;;
		*) find . -print0 | cpio -0o -H "newc" --quiet > "$IMAGE" ;;
	esac
	cd "$OLDPWD"

	lo
	echo "Generate initramfs image done" | msg -2
}

mkbootisofs() {
	DIR=""
	IMAGE=""

	while test "$1"; do
		case "$1" in
			"--output") IMAGE="$2" ; shift ;;
			*)
				if test "$DIR" = ""; then
					DIR="$1"
				fi
				;;
		esac
		shift
	done

	if test "$DIR" = ""; then
		DIR="."
	fi

	echo "Creating bootable iso image" | msg -2
	hi

	if test -d "$DIR/boot"; then
		mkdir "$DIR/boot/grub"
		get_config_grub_cfg > "$DIR/boot/grub/grub.cfg"
	fi

	grub-mkstandalone \
		--format="i386-pc" \
		--output="$DIR/boot/grub/grub.raw" \
		--install-modules="linux16 linux normal iso9660 biosdisk memdisk test search" \
		--modules="linux16 linux normal iso9660 biosdisk memdisk test search" \
		--locales="" \
		--fonts="" \
		--themes="" \
		"/boot/grub/grub.cfg=$DIR/boot/grub/grub.cfg"

	cat "$GRUB_i386_CDBOOT" "$DIR/boot/grub/grub.raw" > "$DIR/boot/grub/bios.img"

	grub-mkstandalone \
		--format="x86_64-efi" \
		--output="$DIR/boot/grub/grub.efi" \
		--modules="" \
		--locales="" \
		--fonts="" \
		--themes="starfield" \
		"/boot/grub/grub.cfg=$DIR/boot/grub/grub.cfg" \
		$GRUB_FONT

	truncate -s "10MB" "$DIR/boot/grub/uefi.img"
	mkdosfs "$DIR/boot/grub/uefi.img"
	mkdir "$DIR/uefi"
	mount "$DIR/boot/grub/uefi.img" "$DIR/uefi"
	mkdir "$DIR/uefi/EFI"
	mkdir "$DIR/uefi/EFI/BOOT"
	cp "$DIR/boot/grub/grub.efi" "$DIR/uefi/EFI/BOOT/BOOTX64.EFI"
	umount "$DIR/uefi"
	rmdir "$DIR/uefi"

	xorriso -as "mkisofs" \
		-iso-level 3 \
		-full-iso9660-filenames \
		--grub2-boot-info \
		--grub2-mbr "$GRUB_i386_HYBRID" \
		--boot-catalog-hide \
		-eltorito-boot "boot/grub/bios.img" \
		-no-emul-boot \
		-boot-load-size 4 \
		-boot-info-table \
		-eltorito-alt-boot \
		-e "boot/grub/uefi.img" \
		-no-emul-boot \
		-append_partition 2 "0xEF" "$DIR/boot/grub/uefi.img" \
		-graft-points \
		-quiet \
		-output - \
		"$DIR" 2>"/dev/null"

	lo
	echo "Bootable iso image done" | msg -2
}

boobstrap_build() {
	SHARE_DIR="/usr/share"

	DIR=""
	TEMPLATE="default.bbuild"
	TIMEOUT="0"
	COMMAND=""
	INSTALL=""

	while test "$1"; do
		case "$1" in
			"--template") TEMPLATE="$2" ; shift ;;
			"--timeout") TIMEOUT="$2" ; shift ;;
			*"="*) INSTALL="$INSTALL $1" ;;
			"--") shift ; COMMAND="$@" ;;
		esac
		shift
	done

	if test "$DIR" = ""; then
		DIR="$(mktemp -d -p $PWD)"
	fi

	for i in $INSTALL; do
		src="${i##*=}"
		dst="$DIR/configure/${i%%=*}"
		install -D "$src" "$dst"
	done

	if test -f "$SHARE_DIR/bootstrap-templates/$TEMPLATE"; then
		hi
		echo "Building configuration [$TEMPLATE]" | msg -1
		sh -c "$SHARE_DIR/bootstrap-templates/$TEMPLATE $DIR"
		case "$?" in
			"0") echo "Done [$TEMPLATE]" | msg -1 ;;
			*) echo "Failed [$TEMPLATE]" | msg -2 ;;
		esac
		lo
	fi
}

boobstrap_run() {
	boobstrap_build "$@"
}

main() {
	PROGNAME="$(basename $0)"

	if test "$PROGNAME" = "boobstrap"; then

		PROGNAME="$1"

		if test "$2"; then
			shift
		fi

		case "$PROGNAME" in
			"build") boobstrap_build "$@" ;;
			"run") boobstrap_run "$@" ;;
			"start") boobstrap_start "$@" ;;
			"stop") boobstrap_stop "$@" ;;
			"list") boobstrap_list "$@" ;;
			"--help"|"-h") rtfm ;;
		esac

	fi

	case "$PROGNAME" in
		"mkbootstrap") mkbootstrap "$@" ;;
		"mkinitramfs") mkinitramfs "$@" ;;
		"mkbootisofs") mkbootisofs "$@" ;;
	esac
}

hi() {
	if "$INDENT" = ""; then
		export INDENT="\* "
	else
		export INDENT="$INDENT  "
	fi
}

lo() {
	export INDENT="${INDENT%??}"
}

msg() {
	STDOUT=""
	STDERR=""

	while test "$1"; do
		case "$1" in
			"-1") STDOUT="yes" ;;
			"-2") STDERR="yes" ;;
		esac
		shift
	done

	if test "$STDOUT" = "yes"; then
		while read input; do
			echo "$INDENT$input" >&1
		done
	fi

	if test "$STDERR" = "yes"; then
		while read input; do
			echo "$INDENT$input" >&2
		done
	fi
}

rtfm() {
	cat <<"EOF"
WUT?
EOF
}

get_config_init() {
	cat <<"EOF"
#! /bin/sh -
mount -t proc none /proc
mount -t sysfs none /sys
mount -t devtmpfs devtmpfs /dev
mount -t tmpfs none /run
mount -t tmpfs tmpfs /merged
mount -t tmpfs tmpfs /overlay
lowerdir="/overlay/lower"
upperdir="/overlay/upper"
workdir="/overlay/work"
mkdir -p $lowerdir
mkdir -p $upperdir
mkdir -p $workdir
for overlay in /overlays/*; do
	if test -d "$overlay"; then
		mv -f $overlay/* "/merged"
	else
		overlay_mount="/overlay/${overlay##*/}"
		lowerdir="$overlay_mount:$lowerdir"
		mkdir -p $overlay_mount
		mount -t squashfs -o ro $overlay $overlay_mount
	fi
done
if test "$lowerdir" = "/overlay/lower"; then
	echo
else
	mount -t overlay -o lowerdir="$lowerdir",upperdir="$upperdir",workdir="$workdir" overlay /merged
fi
umount /proc
umount /sys
umount /dev
umount /run
exec switch_root /merged /sbin/init
EOF
}

get_config_grub_cfg() {
	cat <<"EOF"
function load_video {
	if [ x$feature_all_video_module = xy ]; then
		insmod all_video
	else
		insmod efi_gop
		insmod efi_uga
		insmod vbe
		insmod vga
	fi
}
if loadfont $prefix/font.pf2; then
	set gfxmode=auto
	load_video
	insmod gfxterm
	terminal_output gfxterm
	set gfxpayload=keep
	insmod png
	set theme="$prefix/themes/starfield/theme.txt"
fi
set color_normal=cyan/blue
set menu_color_normal=black/light-gray
set menu_color_highlight=white/cyan
set timeout=3
menuentry "GNU/Linux" {
	search --no-floppy --file --set root /boot/vmlinuz
	linux /boot/vmlinuz
	initrd /boot/initrd
}
EOF
}

preflight_checks() {
	case "$(id -u)" in
		"0") ;;
		*) echo "must be run with root priveleges, sorry." | msg -2 ; return 1 ;;
	esac

	for dep in "grub-mkstandalone" "mkdosfs" "xorriso"; do
		which "$dep" 1>"/dev/null" 2>"/dev/null"
		case "$?" in
			"0") ;;
			*) TEST="x" ;;
		esac
	done

	if test "$TEST" = "x"; then
		echo "install: dosfstools, grub2, grub2-efi, xorriso." | msg -2
		echo "nice to have (optional): squashfs-tools." | msg -2
		return 1
	fi

	for dir in "/usr/lib/grub/i386-pc" "/lib/grub/i386-pc"; do
		if test -f "$dir/cdboot.img"; then
			GRUB_i386_CDBOOT="$dir/cdboot.img"
		fi
		if test -f "$dir/boot_hybrid.img"; then
			GRUB_i386_HYBRID="$dir/boot_hybrid.img"
		fi
	done

	if test "$GRUB_i386_CDBOOT" = ""; then
		echo "cdboot.img none found. install grub-pc-bin or something." | msg -2
		echo "or specify file: export GRUB_i386_CDBOOT=./cdboot.img" | msg -2
		return 1
	fi

	if test "$GRUB_i386_HYBRID" = ""; then
		echo "boot_hybrid.img none found. install grub-pc-bin or something." | msg -2
		echo "or specify file: export GRUB_i386_HYBRID=./boot_hybrid.img" | msg -2
		return 1
	fi

	for font in "/usr/lib/grub/fonts/"*".pf2" "/lib/grub/fonts/"*".pf2" "/usr/share/grub/"*".pf2"; do
		if test -f "$font"; then
			GRUB_FONT="$font"
		fi
	done
	
	if test "$GRUB_FONT" = ""; then
		echo "any *.pf2 file none found. check your grub files." | msg -2
		echo "or specify file: export GRUB_FONT=./unicode.pf2" | msg -2
		echo "continue to running without any font." | msg -2
	else
		GRUB_FONT="/boot/grub/font.pf2=$GRUB_FONT"
	fi
}

preflight_checks || exit $?

main "$@"
