#! /bin/sh -

lddtree() {
	echo $1

	for dep in $(ldd "$1" | grep -o '/.* '); do
		lddtree "$dep"
	done
}

pkgadd() {
	CHROOT="/"

	# NOTABUG
	# behavior like original pkgadd
	while test "$2"; do
		case "$1" in
			"--root"|"-r") CHROOT="$2" ; shift ;;
			*) echo "invalid option $1" ; exit 1 ;;
		esac
		shift
	done

	name="${1}"
	name="${name##*/}"
	name="${name%%.pkg*}"
	name="${name%%\#*}"

	version="${1}"
	version="${version##*/}"
	version="${version%%.pkg*}"
	version="${version##*\#}"

	echo "$name" >> "$CHROOT/var/lib/pkg/db"		|| return 1
	echo "$version" >> "$CHROOT/var/lib/pkg/db"		|| return 1
	tar -xpvf "$1" \
		--xattrs-include="*.*" \
		--numeric-owner \
		--directory $CHROOT >> $CHROOT/var/lib/pkg/db	|| return 1
	echo "" >> "$CHROOT/var/lib/pkg/db"			|| return 1
}

mkbootstrap() {
	case "$1" in
		"crux_gnulinux") shift ; cruxstrap "$@" ;;
		"archlinux_gnulinux"|"arch_gnulinux") shift ; pacstrap "$@" ;;
		"debian_gnulinux") shift ; debootstrap "$@" ;;
	esac
}

cruxstrap() {
	CHROOT=""
	PORTS=""
	PACKAGES=""
	INSTALL=""

	while test "$1"; do
		case "$1" in
			"--ports-dir") PORTS="$PORTS $2" ; shift ;;
			*)
				if test "$CHROOT" = ""; then
					CHROOT="$1"
				else
					PACKAGES="$PACKAGES $1"
				fi
				;;
		esac
		shift
	done

	for dir in $PORTS; do
		for prt in "$dir/"*; do
			if test "$PACKAGES" = ""; then
				INSTALL="$INSTALL $prt"
			else
				for pkg in $PACKAGES; do
					if test -f "$pkg"; then
						INSTALL="$INSTALL $pkg"
					fi
					case "$prt" in
						*"/$pkg") INSTALL="$INSTALL $prt" ;;
						*"/$pkg#"*) INSTALL="$INSTALL $prt" ;;
					esac
				done
			fi
		done
	done

	mkdir -p "$CHROOT/var/lib/pkg"
	touch "$CHROOT/var/lib/pkg/db"

	for prt in $INSTALL; do
		echo -n "Install: $prt"
		pkgadd --root "$CHROOT" "$prt"
		if [ "$?" = "0" ]; then
			echo " OK"
		else
			echo " ERROR"
		fi
	done
}

mkinitramfs() {
	CHROOT=""
	IS_STANDALONE=""
	IS_OVERLAY=""
	OVERLAYS=""
	COMMAND=""
	IMAGE=""

	while test "$1"; do
		case "$1" in
			"--standalone") IS_STANDALONE="yes" ;;
			"--overlay") IS_OVERLAY="yes" ; OVERLAYS="$OVERLAYS $2" ; shift ;;
			"--command") COMMAND="$2" ; shift ;;
			"--squashfs-xz") COMMAND="mksquashfs \${SOURCE} \${DESTINATION} -b $((1024 * 1024)) -comp xz -Xdict-size 100%" ;;
			"--output") IMAGE="$2" ; shift ;;
			*)
				if test "$CHROOT" = ""; then
					CHROOT="$1"
				fi
				;;
		esac
		shift
	done

	if test "$CHROOT" = ""; then
		CHROOT="."
	fi

	if [ "$IS_STANDALONE" ]; then
		IS_OVERLAY=""
	fi

	if [ "$IS_OVERLAY" ]; then
		case "$COMMAND" in
			"") COMMAND="cp -a \${SOURCE} \${DESTINATION}" ;;
		esac

		for dir in "proc" "sys" "dev" "run" "mnt" "overlay" "overlays"; do
			mkdir -p $CHROOT/$dir
		done

		for dev in "console" "tty" "tty1" "null"; do
			cp -a "/dev/$dev" "$CHROOT/dev/$dev"
		done

		for bin in "sh" "switch_root" "mount" "umount" "mkdir" "rmdir"; do
			for dep in $(lddtree $(which $bin)); do
				if test -f "$CHROOT$dep"; then
					continue
				fi
				install -D "$dep" "$CHROOT$dep"
			done
		done

		get_config_init > "$CHROOT/init"

		chmod +x "$CHROOT/init"

		NUM=0
		for overlay in $OVERLAYS; do
			NUM="$(($NUM + 10))"
			SOURCE="$overlay"
			DESTINATION="$CHROOT/overlays/$NUM-overlay"
			eval "$COMMAND"
		done

	fi

	cd "$CHROOT"
	case "$IMAGE" in
		""|"-") find . -print0 | cpio -0o -H newc ;;
		*) find . -print0 | cpio -0o -H newc > "$IMAGE" ;;
	esac
	cd "$OLDPWD"
}

mkbootisofs() {
	DIRECTORY="$1"

	mkdir -p $DIRECTORY/boot
	mkdir -p $DIRECTORY/boot/grub

	get_config_grub_cfg > $DIRECTORY/boot/grub/grub.cfg

	grub-mkstandalone \
		--format=i386-pc \
		--output=$DIRECTORY/boot/grub/grub.raw \
		--install-modules="linux16 linux normal iso9660 biosdisk memdisk test search" \
		--modules="linux16 linux normal iso9660 biosdisk memdisk test search" \
		--locales="" \
		--fonts="" \
		--themes="" \
		"/boot/grub/grub.cfg=$DIRECTORY/boot/grub/grub.cfg"

	cat $(locate cdboot.img) $DIRECTORY/boot/grub/grub.raw > $DIRECTORY/boot/grub/bios.img

	grub-mkstandalone \
		--format=x86_64-efi \
		--output=$DIRECTORY/boot/grub/grub.efi \
		--install-modules="linux16 linux normal iso9660 serial memdisk test search all_video efi_gop efi_uga gfxterm gfxmenu png" \
		--modules="" \
		--locales="" \
		--fonts="" \
		--themes="starfield" \
		"/boot/grub/grub.cfg=$DIRECTORY/boot/grub/grub.cfg" \
		"/boot/grub/fonts/unifont.pf2=$(locate unifont.pf2)"

	temporarely_mountpoint=$(mktemp -d)
	dd if=/dev/zero of=$DIRECTORY/boot/grub/uefi.img status=none count=8 bs=1M
	mkdosfs $DIRECTORY/boot/grub/uefi.img
	mount $DIRECTORY/boot/grub/uefi.img $temporarely_mountpoint
	mkdir $temporarely_mountpoint/EFI
	mkdir $temporarely_mountpoint/EFI/BOOT
	cp $DIRECTORY/boot/grub/grub.efi $temporarely_mountpoint/EFI/BOOT/BOOTX64.EFI
	umount $temporarely_mountpoint
	rmdir $temporarely_mountpoint

	xorriso -as mkisofs \
		-iso-level 3 \
		-full-iso9660-filenames \
		-eltorito-boot boot/grub/bios.img \
		-no-emul-boot \
		-boot-load-size 4 \
		-boot-info-table \
		--boot-catalog-hide \
		--grub2-boot-info \
		--grub2-mbr $(locate boot_hybrid.img) \
		-eltorito-alt-boot \
		-e boot/grub/uefi.img \
		-no-emul-boot \
		-append_partition 2 0xef $DIRECTORY/boot/grub/uefi.img \
		-graft-points \
		-quiet \
		-output - \
		"$DIRECTORY" 2>/dev/null
}

boobstrap_build() {
	SHARE_DIR="/usr/share"
	SHARE_DIR="/mnt/boobstrap"

	TEMPLATE="default"
	TIMEOUT="0"
	COMMAND=""
	INSTALL=""

	ISO=""
	DIR=""

	while test "$1"; do
		case "$1" in
			"--template") TEMPLATE="$2" ; shift ;;
			"--timeout") TIMEOUT="$2" ; shift ;;
			*"="*) INSTALL="$INSTALL $1" ;;
			"--") shift ; COMMAND="$@" ;;
		esac
		shift
	done

	if test "$ISO" = ""; then
		for f in "crux.iso" "crux-3.5.iso" "crux-3.5-updated.iso"; do
			if test -f "$f"; then
				ISO="$f"
			fi
		done
		if test "$ISO" = ""; then
			exit 0
		fi
	fi

	if test "$DIR" = ""; then
		DIR="$(mktemp -d -p $PWD)"
	fi

	for i in $INSTALL; do
		src="${i##*=}"
		dst="$DIR/configure/${i%%=*}"
		install -D "$src" "$dst"
	done

	if test -f "$SHARE_DIR/templates/$TEMPLATE"; then
		sh -c "$SHARE_DIR/templates/$TEMPLATE $ISO $DIR"
	fi
}

boobstrap_run() {
	boobstrap_build "$@"
}

main() {
	for dep in locate grub-mkstandalone xorriso mkdosfs mksquashfs; do
		which $dep 1>/dev/null 2>/dev/null
		if test "$?" = "0"; then
			continue
		else
			echo "Missing installed package: $dep"
			exit 1
		fi
	done

	if test -d "/usr/lib/grub/x86_64-efi" && test -d "/lib/grub/x86_64-efi"; then
		echo "Missing installed package: grub2-efi"
		exit 1
	fi

	if test -d "/usr/lib/grub/i386-pc" && test -d "/lib/grub/i386-pc"; then
		echo "Missing installed package: grub2"
		exit 1
	fi

	PROGNAME="${0##*/}"

	if test "$PROGNAME" = "boobstrap"; then

		PROGNAME="$1"

		if test "$2"; then
			shift
		fi

		case "$PROGNAME" in
			"build") boobstrap_build "$@" ;;
			"run") boobstrap_run "$@" ;;
			"start") boobstrap_start "$@" ;;
			"stop") boobstrap_stop "$@" ;;
			"list") boobstrap_list "$@" ;;
			"--help"|"-h") rtfm ;;
		esac
	fi

	case "$PROGNAME" in
		"mkbootstrap") mkbootstrap "$@" ;;
		"mkinitramfs") mkinitramfs "$@" ;;
		"mkbootisofs") mkbootisofs "$@" ;;
	esac
}

rtfm() {
	cat <<"EOF"
WUT?
EOF

	exit 0
}

get_config_init() {
	cat <<"EOF"
#!/bin/sh

mount -t proc none /proc

echo "0" > /proc/sys/kernel/printk

mount -t sysfs none /sys

mount -t devtmpfs devtmpfs /dev

mount -t tmpfs none /run

mount -t tmpfs tmpfs /overlay

lowerdir="/lower"
upperdir="/overlay/upper"
workdir="/overlay/work"

mkdir -p $lowerdir
mkdir -p $upperdir
mkdir -p $workdir

for overlay in /overlays/*; do

	if test -d "$overlay"; then

		lowerdir="$overlay:$lowerdir"

	else
		overlay_mount="/overlay/${overlay##*/}"

		lowerdir="$overlay_mount:$lowerdir"

		mkdir -p $overlay_mount

		mount -t squashfs -o ro $overlay $overlay_mount
	fi

done

lowerdir="${lowerdir%?}"

mount -t overlay -o ro,lowerdir="$lowerdir",upperdir="$upperdir",workdir="$workdir" overlay /mnt

umount /proc
umount /sys
umount /dev
umount /run

exec switch_root /mnt /sbin/init
EOF
}

get_config_grub_cfg() {
	cat <<"EOF"
function load_video {
if [ x$feature_all_video_module = xy ]; then
insmod all_video
else
insmod efi_gop
insmod efi_uga
insmod vbe
insmod vga
fi
}
if loadfont $prefix/fonts/unifont.pf2 ; then
set gfxmode=auto
load_video
insmod gfxterm
terminal_output gfxterm
set gfxpayload=keep
insmod png
set theme="$prefix/themes/starfield/theme.txt"
fi
set color_normal=cyan/blue
set menu_color_normal=black/light-gray
set menu_color_highlight=white/cyan
set timeout=3
menuentry "GNU/Linux" {
search --no-floppy --file --set root /boot/vmlinuz
linux /boot/vmlinuz
initrd /boot/initrd
}
EOF
}

main "$@"
